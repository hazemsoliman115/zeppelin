{
  "paragraphs": [
    {
      "text": "// Import statements, hdfs paths and start and stop times\r\nimport breeze.numerics.sqrt\r\nimport ca.savitestbed.monarch.storage.HbaseDriver\r\nimport com.github.nscala_time.time.Imports._\r\nimport org.apache.spark.rdd.RDD\r\nimport org.apache.spark.sql.{DataFrame, SQLContext}\r\nimport org.apache.spark.SparkContext\r\n//import org.apache.spark.SparkConf\r\nimport ca.savitestbed.monarch.fileprocessor._\r\n//import org.apache.spark.SparkContext._\r\nimport org.apache.spark.graphx.{Graph, Edge}\r\n\r\nval hdfsfolders \u003d \"hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/0/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/1/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/2/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/3/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/4/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/5/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/6/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/7/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/8/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/9/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/10/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/11/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/12/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/13/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/14/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/15/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/16/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/17/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/18/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/19/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/20/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/21/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/22/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/23/*\" \r\n\r\nval startTime \u003d \"2016-03-01 01:00:00\"\r\nval endTime \u003d \"2016-03-22 23:59:00\"\r\n\r\nval hdfspaths \u003d hdfsfolders.split(\",\")",
      "dateUpdated": "Mar 9, 2016 4:49:24 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793879237_-1567827309",
      "id": "20160301-005759_907325495",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import breeze.numerics.sqrt\nimport ca.savitestbed.monarch.storage.HbaseDriver\nimport com.github.nscala_time.time.Imports._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.{DataFrame, SQLContext}\nimport org.apache.spark.SparkContext\nimport ca.savitestbed.monarch.fileprocessor._\nimport org.apache.spark.graphx.{Graph, Edge}\nhdfsfolders: String \u003d hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/0/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/1/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/2/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/3/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/4/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/5/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/6/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/7/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/8/*,hdfs://monarch-master/user/ubuntu/mon...startTime: String \u003d 2016-03-01 01:00:00\nendTime: String \u003d 2016-03-22 23:59:00\nhdfspaths: Array[String] \u003d Array(hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/0/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/1/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/2/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/3/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/4/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/5/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/6/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/7/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/8/*, hdfs://monarch-ma..."
      },
      "dateCreated": "Mar 1, 2016 12:57:59 AM",
      "dateStarted": "Mar 9, 2016 4:49:24 PM",
      "dateFinished": "Mar 9, 2016 4:49:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// -------------------------------------------------------read the data objects till the openflow/networking part\r\nval rid_disctime__cpuutil \u003d VmCPUUtil.calculatePeriodAvgPerRidFromFile(sqlContext, hdfspaths, startTime, endTime).map(s \u003d\u003e ((s._1, s._2._1), s._2._2.toDouble)).coalesce(10)\r\nval rid_disctime__diskrb \u003d VmDiskReadByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__diskwb \u003d VmDiskWriteByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__netinbyte \u003d VmNetIncomingByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__netoutbyte \u003d VmNetOutgoingByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n  \r\n  \r\n\r\n// -------------------------------------------------------read the networking data objects\r\nval commPairDisctimeBwutil \u003d OFFlowBw.calculatePeriodAvgPerCommPairFromFile(sqlContext, hdfspaths, startTime, endTime)\r\nval macToRid \u003d Utils.getMacToVMRid(sqlContext)\r\nval ridToId \u003d Utils.getVMRidToID(sqlContext)\r\nval idToRid \u003d ridToId.map(ri \u003d\u003e (ri._2.toLong, ri._1))\r\n\r\n// (rid, (mac, id))\r\nval ridToMacId \u003d macToRid.map(mr \u003d\u003e (mr._2, mr._1)).join(ridToId)\r\nval macToId \u003d ridToMacId.map(rmi \u003d\u003e rmi._2)\r\n\r\n// produce (source Mac, ((des MAC, (discrete_time, average bandwidth)), srcVMid))\r\nval convertedSrcMac \u003d commPairDisctimeBwutil.map(p \u003d\u003e (p._1, (p._2, p._3))).join(macToId)\r\n\r\n// produce (dst Mac, ((srcVMId, (discrete_time, average bandwidth)), dstVMId))\r\nval convertedSrcDstMac \u003d convertedSrcMac.map(p \u003d\u003e (p._2._1._1, (p._2._2, p._2._1._2))).join(macToId)\r\n\r\n//((srcVMId, dstVMId, discrete_time), BW)\r\nval idToIdDisctimeBw \u003d convertedSrcDstMac.map(p \u003d\u003e ((p._2._1._1, p._2._2, p._2._1._2._1), p._2._1._2._2))\r\n  .reduceByKey((a, b) \u003d\u003e a+b)\r\n\r\n// Produce ((rid, dt), value)\r\nval sendBWDisctimeBW \u003d idToIdDisctimeBw\r\n  .map(p \u003d\u003e ((p._1._1, p._1._3), p._2))\r\n  .reduceByKey((a, b) \u003d\u003e a+b)\r\n  .map(f \u003d\u003e (f._1._1, (f._1._2, f._2)))\r\n  .join(idToRid)//(id, ((dt, value), rid))\r\n  .map(f \u003d\u003e ((f._2._2, f._2._1._1), f._2._1._2))\r\n\r\n// Produce ((rid, dt), value)\r\nval receiveBWDisctimeBW \u003d idToIdDisctimeBw\r\n  .map(p \u003d\u003e ((p._1._2, p._1._3), p._2))\r\n  .reduceByKey((a, b) \u003d\u003e a+b)\r\n  .map(f \u003d\u003e (f._1._1, (f._1._2, f._2)))\r\n  .join(idToRid)//(id, ((dt, value), rid))\r\n  .map(f \u003d\u003e ((f._2._2, f._2._1._1), f._2._1._2))\r\n  \r\n  \r\n//-------------------------------------------------join the data objects\r\nval rid_dt__2:RDD[((String, Long), Array[Double])] \u003d rid_disctime__cpuutil.join(rid_disctime__diskrb)\r\n      .filter(s \u003d\u003e s._2._1.isInstanceOf[Double] \u0026\u0026 s._2._2.isInstanceOf[Double])\r\n      .map(s \u003d\u003e (s._1, Array[Double](s._2._1, s._2._2)))\r\n\r\nval rid_dt__3:RDD[((String, Long), Array[Double])] \u003d rid_dt__2.join(rid_disctime__diskwb)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__4:RDD[((String, Long), Array[Double])] \u003d rid_dt__3.join(rid_disctime__netinbyte)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__5:RDD[((String, Long), Array[Double])] \u003d rid_dt__4.join(rid_disctime__netoutbyte)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__6:RDD[((String, Long), Array[Double])] \u003d rid_dt__5.join(receiveBWDisctimeBW)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__7:RDD[((String, Long), Array[Double])] \u003d rid_dt__6.join(sendBWDisctimeBW)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n  \r\n  \r\n  \r\n//-----------------------------------------------some processing needed for the graph generation\r\nval ridIdJoin \u003d rid_dt__7.map(s \u003d\u003e (s._1._1, (s._1._2, s._2))).join(ridToId)\r\nval idDtData \u003d ridIdJoin.map(s \u003d\u003e ((s._2._2,s._2._1._1), s._2._1._2))\r\n//(time,(Array,id))\r\nval DtDataid \u003d idDtData.map(s \u003d\u003e (s._1._2,(s._2,s._1._1)))\r\n//(time,(id,Array))\r\nval DtidData \u003d idDtData.map(s \u003d\u003e (s._1._2,(s._1._1,s._2)))\r\n//(time,((srcid,destid),BW))\r\nval DtSrcIdDstIdBW \u003d idToIdDisctimeBw.map(s \u003d\u003e (s._1._3,((s._1._1,s._1._2),s._2)))",
      "dateUpdated": "Mar 9, 2016 4:49:31 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793900394_2133872508",
      "id": "20160301-005820_2046802124",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "rid_disctime__cpuutil: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2208] at coalesce at \u003cconsole\u003e:81\nrid_disctime__diskrb: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2228] at coalesce at \u003cconsole\u003e:80\nrid_disctime__diskwb: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2248] at coalesce at \u003cconsole\u003e:80\nrid_disctime__netinbyte: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2268] at coalesce at \u003cconsole\u003e:80\nrid_disctime__netoutbyte: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2288] at coalesce at \u003cconsole\u003e:80\ncommPairDisctimeBwutil: org.apache.spark.rdd.RDD[(String, String, (Long, Double), String)] \u003d MapPartitionsRDD[2302] at map at OFFlowBase.scala:185\nmacToRid: org.apache.spark.rdd.RDD[(String, String)] \u003d MapPartitionsRDD[2307] at map at Utils.scala:31\nridToId: org.apache.spark.rdd.RDD[(String, Long)] \u003d MapPartitionsRDD[2312] at map at Utils.scala:38\nidToRid: org.apache.spark.rdd.RDD[(Long, String)] \u003d MapPartitionsRDD[2313] at map at \u003cconsole\u003e:74\nridToMacId: org.apache.spark.rdd.RDD[(String, (String, Long))] \u003d MapPartitionsRDD[2317] at join at \u003cconsole\u003e:78\nmacToId: org.apache.spark.rdd.RDD[(String, Long)] \u003d MapPartitionsRDD[2318] at map at \u003cconsole\u003e:78\nconvertedSrcMac: org.apache.spark.rdd.RDD[(String, ((String, (Long, Double)), Long))] \u003d MapPartitionsRDD[2322] at join at \u003cconsole\u003e:92\nconvertedSrcDstMac: org.apache.spark.rdd.RDD[(String, ((Long, (Long, Double)), Long))] \u003d MapPartitionsRDD[2326] at join at \u003cconsole\u003e:94\nidToIdDisctimeBw: org.apache.spark.rdd.RDD[((Long, Long, Long), Double)] \u003d ShuffledRDD[2328] at reduceByKey at \u003cconsole\u003e:97\nsendBWDisctimeBW: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d MapPartitionsRDD[2335] at map at \u003cconsole\u003e:105\nreceiveBWDisctimeBW: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d MapPartitionsRDD[2342] at map at \u003cconsole\u003e:105\nrid_dt__2: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2347] at map at \u003cconsole\u003e:89\nrid_dt__3: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2351] at map at \u003cconsole\u003e:90\nrid_dt__4: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2355] at map at \u003cconsole\u003e:94\nrid_dt__5: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2359] at map at \u003cconsole\u003e:98\nrid_dt__6: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2363] at map at \u003cconsole\u003e:120\nrid_dt__7: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2367] at map at \u003cconsole\u003e:124\nridIdJoin: org.apache.spark.rdd.RDD[(String, ((Long, Array[Double]), Long))] \u003d MapPartitionsRDD[2371] at join at \u003cconsole\u003e:128\nidDtData: org.apache.spark.rdd.RDD[((Long, Long), Array[Double])] \u003d MapPartitionsRDD[2372] at map at \u003cconsole\u003e:126\nDtDataid: org.apache.spark.rdd.RDD[(Long, (Array[Double], Long))] \u003d MapPartitionsRDD[2373] at map at \u003cconsole\u003e:129\nDtidData: org.apache.spark.rdd.RDD[(Long, (Long, Array[Double]))] \u003d MapPartitionsRDD[2374] at map at \u003cconsole\u003e:129\nDtSrcIdDstIdBW: org.apache.spark.rdd.RDD[(Long, ((Long, Long), Double))] \u003d MapPartitionsRDD[2375] at map at \u003cconsole\u003e:97\n"
      },
      "dateCreated": "Mar 1, 2016 12:58:20 AM",
      "dateStarted": "Mar 9, 2016 4:49:31 PM",
      "dateFinished": "Mar 9, 2016 4:50:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// (time:long, Iterable[(id:long, data:Array[Double])])\nval verticesbytime \u003d DtidData.groupByKey()\n// (time:long, Iterbale[((srcid:long, destid:long),BW)])\nval edgesbytime \u003d DtSrcIdDstIdBW.groupByKey()\n// (time: Long, (vertices: (id: Long, data: Array[Double]), edges: ((srcid: Long, destid: Long), BW: double)))\nval graphelementsbytime \u003d verticesbytime.join(edgesbytime)",
      "dateUpdated": "Mar 9, 2016 4:50:53 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793954008_-1368603999",
      "id": "20160301-005914_2088002055",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "verticesbytime: org.apache.spark.rdd.RDD[(Long, Iterable[(Long, Array[Double])])] \u003d ShuffledRDD[380] at groupByKey at \u003cconsole\u003e:113\nedgesbytime: org.apache.spark.rdd.RDD[(Long, Iterable[((Long, Long), Double)])] \u003d ShuffledRDD[381] at groupByKey at \u003cconsole\u003e:81\ngraphelementsbytime: org.apache.spark.rdd.RDD[(Long, (Iterable[(Long, Array[Double])], Iterable[((Long, Long), Double)]))] \u003d MapPartitionsRDD[384] at join at \u003cconsole\u003e:119\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:14 AM",
      "dateStarted": "Mar 4, 2016 10:40:06 PM",
      "dateFinished": "Mar 4, 2016 10:40:07 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import breeze.linalg._\nobject MyFunctions {\n    def getLaplacEigen(s: Tuple2[Iterable[(Long, Array[Double])],Iterable[((Long, Long), Double)]]) \u003d{\n        //s match {\n        //    case (v, e) \u003d\u003e {\n        //        val ve \u003d v.toSeq\n        //        val ee \u003d e.toSeq\n                //val vertices \u003d sc.parallelize(v.toSeq)\n                //val edges \u003d sc.parallelize(e.toSeq).map(x \u003d\u003e Edge(x._1._1,x._1._2,x._2))\n                //val graphPerT:Graph[Array[Double], Double] \u003d Graph(vertices, edges)\n        //        println(s)\n        //    }\n        //}\n        val vertices \u003d s._1.toSeq\n        val edges \u003d s._2.toSeq\n        //val graphPerT:Graph[Array[Double], Double] \u003d Graph(vertices, edges)\n        \n        val Adj_A \u003d build_Adj(vertices, edges)\n        val Deg_A \u003d build_Deg(vertices, edges)\n        Deg_A\n    }\n    \n    def build_Adj(verticeseq: Seq[(Long, Array[Double])], edgeseq: Seq[((Long, Long), Double)]) \u003d {\n        var Adj_A \u003d DenseMatrix.zeros[Double](verticeseq.size,verticeseq.size)\n        for (edge \u003c- edgeseq){\n            Adj_A(verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._1).get),verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._2).get)) \u003d 1\n            Adj_A(verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._2).get),verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._1).get)) \u003d 1\n            \n        }\n        Adj_A\n    }\n    \n    def build_Deg(verticeseq: Seq[(Long, Array[Double])], edgeseq: Seq[((Long, Long), Double)]) \u003d {\n        var Deg_A \u003d DenseMatrix.zeros[Double](verticeseq.size,verticeseq.size)\n        for (v \u003c- verticeseq){\n            Deg_A(verticeseq.indexOf(v),verticeseq.indexOf(v)) \u003d edgeseq.count(x \u003d\u003e x._1._1 \u003d\u003d v._1 || x._1._2 \u003d\u003d v._1)\n        }\n        Deg_A\n    }\n    \n    def Graphtxt(s: Tuple2[Iterable[(Long, Array[Double])],Iterable[((Long, Long), Double)]])\u003d {\n        val vertices \u003d s._1.map(s \u003d\u003e (\"Vetrex\",s._1,s._2.mkString))\n        val edges \u003d s._2.map(s\u003d\u003e (\"edge\",s._1,s._2))\n        \n        (vertices, edges)\n    }\n}",
      "dateUpdated": "Mar 4, 2016 10:40:10 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793965985_1654768182",
      "id": "20160301-005925_581217075",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import breeze.linalg._\ndefined module MyFunctions\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:25 AM",
      "dateStarted": "Mar 4, 2016 10:40:10 PM",
      "dateFinished": "Mar 4, 2016 10:40:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// (time, graph)\nval graphPerT \u003d graphelementsbytime.map(s \u003d\u003e MyFunctions.getLaplacEigen(s._2))\nval graphText \u003d graphelementsbytime.map(s \u003d\u003e (s._1, MyFunctions.Graphtxt(s._2)))",
      "dateUpdated": "Mar 4, 2016 10:40:15 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793980969_-1653323643",
      "id": "20160301-005940_1253135344",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "graphPerT: org.apache.spark.rdd.RDD[breeze.linalg.DenseMatrix[Double]] \u003d MapPartitionsRDD[385] at map at \u003cconsole\u003e:126\ngraphText: org.apache.spark.rdd.RDD[(Long, (Iterable[(String, Long, String)], Iterable[(String, (Long, Long), Double)]))] \u003d MapPartitionsRDD[386] at map at \u003cconsole\u003e:125\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:40 AM",
      "dateStarted": "Mar 4, 2016 10:40:15 PM",
      "dateFinished": "Mar 4, 2016 10:40:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "graphText.take(2).foreach(println)\ngraphText.saveAsTextFile(\"hdfs://monarch-master/user/ubuntu/monitoring/Hazem/graph.txt\")",
      "dateUpdated": "Mar 4, 2016 10:41:44 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793995781_-338221254",
      "id": "20160301-005955_1457858959",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "(12140490,(List((Vetrex,31337,1.29293785310734480.07606.85714285714316.43697478991596516.302521008403368.85000000000000111.418518518518518), (Vetrex,191132,0.76229508196721310.01779.409836065573732.22131147540984199.69672131147541276.54444444444441713.5814814814814), (Vetrex,148979,36.12678571428571621.1943127962085149738.05714285714120395.0142857142882559.75714285714514765.7890200981692998.425), (Vetrex,167374,10.5777993887190880.08499.25461556.2857142855501159.0583333345186668.2198007075460774.133333333), (Vetrex,167373,0.61016949152542370.00.019.81355932203389630.66101694915254314.67868852459016428.0), (Vetrex,181792,1.02913617980303161038813.86666666664232.533333333334137.08333333333334948.2644628099174185.65370370370374956.5500000000002), (Vetrex,182540,13.264609881511290.04447.0857142857151548.28571428571421813.551354.48797814207661685.983333333333), (Vetrex,175062,0.66267123287671231057266.16216216216310.054054054054252.351351351351331226.7945205479452304.562037037037041227.2944444444445), (Vetrex,31341,1.05696202531645580.09523.19999999999942.82531.61006289308176433.4185185185185225.85), (Vetrex,189703,34.734185222672070.06301.5384615384625754474.2068965524951988.3931623945686032.1501696484938921.609739633), (Vetrex,181797,0.67763157894736851058239.37864077673916.3508771929824130.84070796460176908.0913461538461128.65893.7722275795563), (Vetrex,175063,0.85294117647058811070838.96470588247228.235294117648306.03571428571431433.3411764705884333.83428267111231386.7666666666667), (Vetrex,191049,2.74594492701170270.04061.57983193277323226.1753687.94166666666663248.7583333333343652.311636129862), (Vetrex,191131,1.22950819672131170.01477.2459016393443595.991803278688595.647540983606562112.248148148148837.3), (Vetrex,181794,0.25520833333333330.04164.26666666666650.33333333333333657.7024793388429815.88333333333333140.44444444444445), (Vetrex,182541,15.3447485412614560.04164.2666666666663278.53333333333333861.2333333333333094.57773224043743647.9), (Vetrex,167377,0.73043478260869550.00.017490.5753424657525818231.15189873415989.089938926395631205.453873352), (Vetrex,148980,3.30357142857142846348.895729.3714285714233326.5857142857134659.333085.669933777934994.84166666667), (Vetrex,31339,1.34322033898305080.09059.79661016949314.4102564102564114.5593220338983068.511.0), (Vetrex,190114,1.01842001576044130.03120.76190476190584.044.484.6166666666666744.0360655737705), (Vetrex,31336,0.79651162790697670.09300.32941176470611.8604651162790712.5882352941176478.511.0), (Vetrex,177364,0.66153846153846141032444.06153846153056.24615384615487.05384615384615376.775193798449682.96666666666667348.6150921552283), (Vetrex,191478,23.6621888281724320.0195761.719008264459189.6859504132235596.7459016393449300.8111111111125641.711111111112), (Vetrex,174884,10.7377049180327870.00.02405908.3524590163119983.540983606572401152.8416666671055679.2185185181), (Vetrex,191134,0.96747311827956980.01692.561983471074431.801652892561982196.19672131147541281.85185185185185199.46666666666667), (Vetrex,189941,20.1924076607387130.0171484.279069767453930.9824561403513433.63742690058463980.64207650273243445.058333333333), (Vetrex,181793,0.61764705882352941024702.86390532554774.627218934911165.14117647058825984.5411764705882213.087037037037081032.3666666666668), (Vetrex,179873,1.04637096774193551056041.29032258064360.258064516131005.685483870967768799.717741935481006.737608486017381164.53333333334), (Vetrex,167372,12.855932203389830.00.05658140.8220338985658124.8898305085669693.5490588955696981.591666666), (Vetrex,191558,0.91165755919854260.01421.752066115702331.21311475409836197.55371900826447278.9037037037037199.19999999999996), (Vetrex,174885,7.909836065573770.00.01326157.114754098263485.04065040651334417.5166666666555403.8), (Vetrex,174887,8.9846153846153830.00.01270595.784615384659630.81267646.883333333358729.15762480318), (Vetrex,177365,0.349759615384615360.02496.609523809523630.64423076923077125.6538461538461527.650000000000002116.24999999999997), (Vetrex,175064,0.82926829268292681057204.45901639346781.901639344263273.77235772357721628.8688524590166269.7499999999999414705.070370370371), (Vetrex,167371,16.288135593220340.00.05678094.3813559335678115.3305084747287319.9946466595696988.008333334), (Vetrex,148982,2.45766129032258050.08324.12903225806418041.91215413.76344086021520173.18237704918324745.050000000007), (Vetrex,169531,1.26437451437451440.08381.04615384615310708.03076923076913458.64615384615418760.15669398907321425.006379086783), (Vetrex,179874,1.05188679245283011057308.98113207544714.264150943396478.085714285714325330.561904761904312.5194444444444515561.441666666664), (Vetrex,175056,4.8354166666666661194.6666666666667115331.173553719015724.1916666666672784.50833333333311896.1838530552852788.2333333333336), (Vetrex,191048,30.1500000000000021133363.2198929.066666666683780.45000000000033249.2666666666673652.3116361298623248.758333333334), (Vetrex,148983,2.9842105263157895475.70526315789589767.0736842105328142.39999999999836364.5684210526337800.1357113086946654.881557377055), (Vetrex,182539,26.838541666666664384.0337682.863157894755261.0476190476194352.4052631578945219.4916666666674334.674043715847), (Vetrex,191479,2.28265765765765760.03161.34228187919465593.3986486486489598.0540540540555641.7111111111129300.811111111112), (Vetrex,148647,0.51453488372093010.09525.5813953488384622.0919540229898132.9418604651164672.88158.591666666666), (Vetrex,189942,11.041441230055760.04726.1538461538473434.7310924369753963.6386554621853445.0583333333333980.6420765027324), (Vetrex,174883,3.606557377049180.00.0432115.213114754120965.60655737705430010.7166666667184275.24814814815), (Vetrex,148981,10.0263157894736834613.3894736842184593.1789473684243759.42105263158555817.447574.59928220802447855.53674863384)),List((edge,(177364,179874),0.0), (edge,(182539,182541),3093.527732240437), (edge,(181797,175064),0.0), (edge,(181792,175063),0.0), (edge,(182570,181793),64.96666666666668), (edge,(148982,148981),1337.3999999999999), (edge,(175063,177365),0.0), (edge,(177364,181792),0.0), (edge,(181793,175062),0.0), (edge,(167374,189703),54826.69629629629), (edge,(182540,182539),1684.933333333333), (edge,(174885,167371),555403.8), (edge,(148979,148983),21566.30833333333), (edge,(175056,181797),81.15), (edge,(177365,182570),24.53333333333334), (edge,(175062,181793),0.0), (edge,(179873,175063),0.0), (edge,(175062,177365),0.0), (edge,(148979,148981),31394.149999999998), (edge,(181792,177365),0.0), (edge,(179874,175064),0.0), (edge,(148981,148980),8254.280737704918), (edge,(181797,177364),0.0), (edge,(175062,179873),0.0), (edge,(175062,175056),722.9499999999999), (edge,(175062,182570),489.53333333333336), (edge,(181792,182570),546.2), (edge,(181792,175064),3.8333333333333326), (edge,(181793,175056),403.6), (edge,(179873,181797),4.533333333333333), (edge,(177364,179873),0.0), (edge,(31341,31336),8.5), (edge,(175062,175063),3.8333333333333335), (edge,(175064,181792),57.70370370370372), (edge,(182541,182540),113.34166666666667), (edge,(181797,177365),0.0), (edge,(175056,175062),192.87500000000003), (edge,(148983,148979),31119.88278688525), (edge,(148981,148979),432609.5024590164), (edge,(175056,179873),81.15), (edge,(181797,179873),7.5042751526840235), (edge,(169531,148980),1229.9911086412894), (edge,(181793,181797),0.0), (edge,(175064,182570),7563.788888888889), (edge,(177365,175064),0.0), (edge,(191048,191049),3248.758333333334), (edge,(182570,179873),901.9833333333332), (edge,(179873,175062),0.0), (edge,(148979,148647),43.0), (edge,(175063,182570),606.3), (edge,(31337,31341),11.418518518518518), (edge,(177364,182570),27.237116791701396), (edge,(181793,177364),0.0), (edge,(182570,177365),4.400000000000001), (edge,(175056,179874),89.80833333333334), (edge,(167372,190114),28.0), (edge,(179873,177365),0.0), (edge,(182570,181797),42.96666666666667), (edge,(181797,181793),0.0), (edge,(191131,191558),278.9037037037037), (edge,(175056,175063),215.5333333333333), (edge,(181793,175063),0.0), (edge,(189703,167377),15989.08993892639), (edge,(179873,177364),0.0), (edge,(179873,181793),6.133333333333335), (edge,(179874,175062),4.183333333333334), (edge,(179874,177364),0.0), (edge,(182570,181792),42.96666666666668), (edge,(189703,167374),4922932.519800707), (edge,(182570,175056),1027.6000000000001), (edge,(175056,181793),81.15), (edge,(179874,181793),3.1333333333333333), (edge,(181797,175063),0.0), (edge,(191131,191134),281.85185185185185), (edge,(181793,179873),3.1333333333333337), (edge,(179873,181792),3.833333333333333), (edge,(182540,182541),1.0499999999999998), (edge,(174887,167371),58729.15762480318), (edge,(181792,175062),0.0), (edge,(175062,177364),0.0), (edge,(31339,31341),11.0), (edge,(167371,174883),430010.7166666667), (edge,(191132,191131),1713.5814814814814), (edge,(175063,175056),756.3666666666666), (edge,(175064,175056),6932.77037037037), (edge,(181793,182570),615.6666666666666), (edge,(175063,177364),3.8333333333333335), (edge,(175064,177365),0.0), (edge,(148983,148980),8296.223087431694), (edge,(177364,175064),0.0), (edge,(148981,169531),231.6058743169399), (edge,(189942,189941),3980.6420765027324), (edge,(177365,177364),0.0), (edge,(175063,181792),0.0), (edge,(177364,177365),0.0), (edge,(177364,181793),0.0), (edge,(148982,148980),2900.0750000000003), (edge,(148979,148982),17680.308333333334), (edge,(148982,148983),1223.4666666666667), (edge,(189941,189942),3445.058333333333), (edge,(182570,175063),64.96666666666668), (edge,(167371,174887),1267646.8833333333), (edge,(179874,181792),0.0), (edge,(148979,148980),4318.508333333333), (edge,(175062,179874),7.144444444444444), (edge,(179873,179874),3.1333333333333333), (edge,(177365,175062),0.0), (edge,(182570,175064),49.49999999999999), (edge,(190114,167373),14.678688524590164), (edge,(175064,175062),57.70370370370372), (edge,(175062,181797),0.0), (edge,(190114,167372),14.678688524590168), (edge,(177365,181793),0.0), (edge,(175056,177365),23.25), (edge,(181794,175056),40.44444444444445), (edge,(177365,175056),91.71666666666664), (edge,(167371,190114),28.616666666666667), (edge,(181797,181792),0.0), (edge,(182570,175062),42.96666666666667), (edge,(175062,175064),3.8333333333333335), (edge,(167371,167372),263731.43333333335), (edge,(181793,175064),3.8333333333333335), (edge,(167371,174884),2401152.841666667), (edge,(177365,179873),0.0), (edge,(179873,182570),80742.675), (edge,(181792,177364),0.0), (edge,(191478,191479),5641.711111111112), (edge,(181792,179874),0.0), (edge,(175063,175062),6.833333333333333), (edge,(179874,175056),408.54166666666663), (edge,(148980,148979),13715.0), (edge,(181792,175056),399.68333333333334), (edge,(175063,179873),0.0), (edge,(175056,181794),15.883333333333331), (edge,(177365,181797),0.0), (edge,(181797,182570),492.5259402121503), (edge,(175056,181792),81.15), (edge,(175063,179874),0.0), (edge,(175062,181792),0.0), (edge,(175063,175064),13.433333333333332), (edge,(182541,182539),3534.5583333333334), (edge,(181793,179874),6.133333333333334), (edge,(148647,148979),72.0), (edge,(148983,148982),386.81639344262294), (edge,(31341,31339),8.5), (edge,(179874,181797),0.0), (edge,(179874,177365),0.0), (edge,(175063,181793),0.0), (edge,(175063,181797),0.0), (edge,(148980,148647),4629.8), (edge,(181793,177365),0.0), (edge,(148983,169531),261.7924863387979), (edge,(179873,175056),404.225), (edge,(191049,191048),3652.311636129862), (edge,(174884,167371),1055679.2185185181), (edge,(169531,148979),17965.295440863203), (edge,(182539,182540),1241.14631147541), (edge,(181797,175062),0.0), (edge,(181797,179874),0.0), (edge,(177364,175056),314.54369269241454), (edge,(181792,181793),0.0), (edge,(177364,175062),0.0), (edge,(169531,148981),1042.8824789293324), (edge,(175064,181797),0.0), (edge,(179874,179873),6.133333333333335), (edge,(174883,167371),184275.24814814815), (edge,(167371,174885),1334417.5166666666), (edge,(177364,175063),6.834282671112345), (edge,(177365,179874),0.0), (edge,(167372,167371),5433217.891666666), (edge,(182570,177364),9.833333333333334), (edge,(182570,179874),206.29999999999998), (edge,(175064,175063),35.4), (edge,(167377,189703),5631205.453873352), (edge,(191131,191132),276.5444444444444), (edge,(31336,31341),11.0), (edge,(167373,190114),28.0), (edge,(175064,179874),0.0), (edge,(148983,148981),6590.16680327869), (edge,(181793,181792),0.0), (edge,(175064,177364),0.0), (edge,(148980,148983),7337.9333333333325), (edge,(148980,148981),7210.0), (edge,(169531,148983),1186.8373506529592), (edge,(177364,181797),0.0), (edge,(181792,179873),6.833333333333333), (edge,(175064,181793),57.7037037037037), (edge,(179873,175064),0.0), (edge,(177365,175063),0.0), (edge,(190114,167371),14.678688524590168), (edge,(179874,175063),7.266666666666667), (edge,(167374,167372),5405947.437037037), (edge,(175064,179873),0.0), (edge,(148647,148980),8086.591666666666), (edge,(175056,175064),195.31666666666663), (edge,(181797,175056),393.7420122147219), (edge,(148981,148983),6485.590027322404), (edge,(179874,182570),15132.18333333333), (edge,(175056,177364),69.3), (edge,(148981,148982),274.55765027322406), (edge,(148979,169531),17996.15), (edge,(167372,167374),263735.7), (edge,(148980,148982),1831.5), (edge,(181792,181797),0.0), (edge,(191558,191131),199.19999999999996), (edge,(175056,182570),1661.6666666666667), (edge,(148980,169531),270.60833333333335), (edge,(31341,31337),8.850000000000001), (edge,(191134,191131),199.46666666666667), (edge,(191479,191478),9300.811111111112), (edge,(148982,148979),19284.108333333337), (edge,(177365,181792),0.0))))\n(12141315,(List((Vetrex,31337,1.35365662272441930.07285.80530973451419.0526315789473717.4736842105263159.5511.7), (Vetrex,167374,10.50.08802.8070175438595359193.1578947375502116.7610619474960659.4228888895467050.475), (Vetrex,181792,0.91977459016393430.03140.266666666667155.28925619834711197.58333333333350.01199.0666666666668), (Vetrex,175062,0.59605130784708240.014540.800000000001272.09929078014181252.82978723404273.7822222222222221289.0333333333333), (Vetrex,31341,0.99425287356321820.010631.19101123595544.25882352941176430.4186046511627911.727.25)),List((edge,(177365,175056),91.36666666666666), (edge,(148979,148980),1988.6416666666667), (edge,(148979,148647),43.0), (edge,(181793,175063),6.833333333333333), (edge,(175062,177364),0.0), (edge,(175062,181792),0.0), (edge,(181793,175064),3.8333333333333335), (edge,(189703,167374),4960659.422888889), (edge,(175062,175064),11.966666666666667), (edge,(175063,181793),3.8333333333333335), (edge,(182540,182539),1490.95), (edge,(181792,175056),435.73333333333335), (edge,(191479,191478),9323.0), (edge,(175062,182570),514.9583333333334), (edge,(148980,148982),1653.775), (edge,(31341,31339),8.5), (edge,(175062,179873),0.0), (edge,(148980,148983),3496.708333333333), (edge,(31337,31341),11.7), (edge,(181792,175062),0.0), (edge,(181797,181793),0.0), (edge,(167374,189703),53907.275), (edge,(181797,175056),438.21577777777776), (edge,(181793,175062),0.0), (edge,(181793,179873),0.0), (edge,(31341,31337),9.55), (edge,(181793,177364),0.0), (edge,(148980,148979),6030.35), (edge,(148980,148981),3552.683333333333), (edge,(181797,175063),17.057111111111112), (edge,(148979,148981),8566.933333333334), (edge,(175063,181797),11.283333333333333), (edge,(175062,175056),755.275), (edge,(148979,169531),6867.200000000001), (edge,(148980,169531),112.80833333333332), (edge,(175063,175056),651.7166666666667), (edge,(191049,191048),3709.4157777777777), (edge,(189703,167377),16388.058444444443), (edge,(175063,182570),35165.00833333333), (edge,(148979,148982),6703.983333333334), (edge,(167377,189703),5680414.410444445), (edge,(177365,182570),24.533333333333335), (edge,(181792,175064),8.916666666666668), (edge,(167374,167372),5413143.199999999), (edge,(175063,177364),3.8333333333333335), (edge,(148980,148647),4622.55), (edge,(189942,189941),3332.4044444444444), (edge,(181792,182570),754.4166666666667), (edge,(31341,31336),9.2), (edge,(181793,175056),473.6166666666667), (edge,(181793,182570),799.9333333333333), (edge,(182540,182541),1.75), (edge,(181797,175062),3.782222222222222), (edge,(148979,148983),8609.599999999999), (edge,(181797,175064),12.004444444444445), (edge,(175062,181797),6.833333333333333), (edge,(181797,182570),520.6820000000001), (edge,(181793,181797),0.0))))\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:55 AM",
      "dateStarted": "Mar 4, 2016 10:41:44 PM",
      "dateFinished": "Mar 4, 2016 10:41:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndef cleanfile(filename):\n    ret_dict \u003d {}\n    with open(filename) as f:\n        graph_list \u003d []\n        for line in f:\n            ## get the key \n            t_key \u003d \"\"\n            for x in line:\n                if x \u003d\u003d \"(\":\n                    pass\n                elif x \u003d\u003d \",\":\n                    break\n                else:\n                    t_key +\u003d x\n            ## list of preprocessed vertices\n            list_vert \u003d str(line).split(\"Vetrex\")\n            ## list of preprocessed edges\n            list_edges \u003d str(list_vert[-1]).split(\"edge\")\n            ## update last element in vertices\n            list_vert[-1] \u003d list_edges[0]\n            list_vert \u003d list_vert[1:]\n            list_edges \u003d list_edges[1:]\n            ## dict of vertices and edges\n            vert_dict \u003d {}\n            edge_list \u003d []\n            for v in list_vert:\n                ed_v \u003d v\n                list_chs \u003d \" ()List\"\n                for x in list_chs:\n                    ed_v \u003d ed_v.replace(x,\"\")\n                if ed_v[0] \u003d\u003d \",\":\n                    ed_v \u003d ed_v[1:]\n                if ed_v[-1] \u003d\u003d \",\":\n                    ed_v \u003d ed_v[:-1]\n                ded_v \u003d ed_v.split(\",\")\n                vkey \u003d ded_v[0]\n                vval \u003d ded_v[1].split(\".\")\n                vert_dict[vkey] \u003d vval\n            for e in list_edges:\n                ed_e \u003d e\n                list_chs \u003d \" ()\\n\"\n                for x in list_chs:\n                    ed_e \u003d ed_e.replace(x,\"\")\n                if ed_e[0] \u003d\u003d \",\":\n                    ed_e \u003d ed_e[1:]\n                if ed_e[-1] \u003d\u003d \",\":\n                    ed_e \u003d ed_e[:-1]\n                eval \u003d ed_e.split(\",\")\n                edge_list.append(eval)\n                ret_tuple \u003d (t_key,[vert_dict,edge_list])\n            graph_list.append(ret_tuple)\n    return graph_list\n            \n                \n    #print(t_key)\n    #print(list_vert[0])\n    #print(list_vert[1])\n    #print(list_vert[-1])\n    #print(list_edges[0])\n    #print(list_edges[1])\n    #print(list_edges[-1])\n    #print(\"Step 1\")\n    #print(ed_v)\n    #print(ded_v)\n    #print(vkey)\n    #print(vval)\n    #print(\"Step 2\")\n    #print(ed_e)\n    #print(eval)\n    \ndef build_graph(g_dict):\n    # function to build graph, input is a list of vert_dict and list_edge\n    G\u003dnx.DiGraph()\n    for v in g_dict[0].keys():\n        G.add_node(v)\n    for e in g_dict[1]:\n        G.add_edge(e[0],e[1])\n    return G\n    \ndef process_graph(G):\n    return nx.degree_centrality(G)\n    \ndef show(p):\n    img \u003d StringIO.StringIO()\n    p.savefig(img, format\u003d\u0027svg\u0027)\n    img.seek(0)\n    print \"%html \u003cdiv style\u003d\u0027width:600px\u0027\u003e\" + img.buf + \"\u003c/div\u003e\"",
      "dateUpdated": "Mar 5, 2016 12:22:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794004268_888373564",
      "id": "20160301-010004_630648457",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:00:04 AM",
      "dateStarted": "Mar 5, 2016 12:22:47 AM",
      "dateFinished": "Mar 5, 2016 12:22:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom __future__ import print_function\nimport networkx as nx\nfrom networkx import algorithms\nfrom networkx.algorithms import approximation as approx\n\nimport re\nfilename \u003d \"/home/ubuntu/collectedgraph.txt\"\n# list of (time, [vert_dict,edge_list])\ngraph_list \u003d cleanfile(filename)\n# Rdd of list( tupe(time, [v_dict, edge_list]) ) \ngraph_sc \u003d sc.parallelize(graph_list)\ngraph_sc_key \u003d graph_sc.sortByKey()\ngraph_build \u003d graph_sc_key.map(lambda s: (s[0],build_graph(s[1])))\ngraph_degree_connectivity \u003d graph_build.map(lambda s: (s[0],nx.node_connectivity(s[1])))\ngraph_degree_centrality \u003d graph_build.map(lambda s: (s[0],nx.degree_centrality(s[1])))\ngraph_degree_centrality_mean \u003d graph_degree_centrality.map(lambda s: sum(s[1].values())/len(s[1].values()))\ngraph_is_directed_acyclic_graph \u003d graph_build.map(lambda s: (s[0],nx.is_directed_acyclic_graph(s[1])))\ngraph_number_connected_components \u003d graph_build.map(lambda s: (s[0],nx.number_connected_components(s[1])))\ngraph_is_weakly_connected \u003d graph_build.map(lambda s: (s[0],nx.is_weakly_connected(s[1])))\ngraph_dag_longest_path_length \u003d graph_build.map(lambda s: (s[0],nx.dag_longest_path_length(s[1])))\ngraph_number_strongly_connected_components \u003d graph_build.map(lambda s: (s[0],nx.number_strongly_connected_components(s[1])))\ngraph_number_weakly_connected_components \u003d graph_build.map(lambda s: (s[0],nx.number_weakly_connected_components(s[1])))\n\nprint(graph_degree_radius.take(10))\n\n\n\n#graph_sc_built.foreach(print)",
      "dateUpdated": "Mar 4, 2016 11:11:21 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794022955_-625982783",
      "id": "20160301-010022_1469123699",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[(\u002712140485\u0027, False), (\u002712140486\u0027, False), (\u002712140487\u0027, False), (\u002712140488\u0027, False), (\u002712140489\u0027, False), (\u002712140490\u0027, False), (\u002712140491\u0027, False), (\u002712140492\u0027, False), (\u002712140493\u0027, False), (\u002712140494\u0027, False)]\n"
      },
      "dateCreated": "Mar 1, 2016 1:00:22 AM",
      "dateStarted": "Mar 4, 2016 11:11:21 PM",
      "dateFinished": "Mar 4, 2016 11:11:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ngraph_strongly_connected_components \u003d graph_build.map(lambda s: (s[0],list(nx.strongly_connected_components(s[1])) ))\nprint(graph_strongly_connected_components.take(3))\nmean_cent_list \u003d []\nmax_cent_list \u003d []\nc_size_list \u003d []\nmixed_list \u003d []\nfor c in graph_strongly_connected_components.take(1)[0][1]:\n    mean_cent \u003d 0\n    max_cent \u003d []\n    for v in list(c):\n        mean_cent +\u003d graph_degree_centrality.take(1)[0][1][v]\n        max_cent.append(graph_degree_centrality.take(1)[0][1][v])\n    mean_cent_list.append(mean_cent/len(c))\n    max_cent_list.append(max(max_cent))\n    c_size_list.append(len(c))\n    mixed_list.append((len(c),max(max_cent)))\n    \nprint(mean_cent_list)\nprint(max_cent_list)\nprint(c_size_list)\nmixed_list_RDD \u003d sc.parallelize(mixed_list)\nmixed_list_RDD \u003d mixed_list_RDD.map(lambda p: Row(Size\u003dp[0], Centrality\u003dp[1]))\n",
      "dateUpdated": "Mar 7, 2016 8:22:49 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457134190785_1953139476",
      "id": "20160304-232950_367692594",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[(\u002712140485\u0027, [set([\u0027191132\u0027, \u0027191131\u0027, \u0027191134\u0027, \u0027191558\u0027]), set([\u0027167374\u0027, \u0027167377\u0027, \u0027167371\u0027, \u0027167372\u0027, \u0027167373\u0027, \u0027174887\u0027, \u0027174884\u0027, \u0027174885\u0027, \u0027174883\u0027, \u0027190114\u0027, \u0027189703\u0027]), set([\u0027175063\u0027, \u0027175062\u0027, \u0027177364\u0027, \u0027177365\u0027, \u0027175064\u0027, \u0027182570\u0027, \u0027181792\u0027, \u0027181793\u0027, \u0027179873\u0027, \u0027179874\u0027, \u0027181797\u0027, \u0027181794\u0027, \u0027175056\u0027]), set([\u0027148647\u0027, \u0027148980\u0027, \u0027148981\u0027, \u0027148982\u0027, \u0027148983\u0027, \u0027169531\u0027, \u0027148979\u0027]), set([\u0027182539\u0027, \u0027182540\u0027, \u0027182541\u0027]), set([\u0027189942\u0027, \u0027189941\u0027]), set([\u002731339\u0027, \u002731341\u0027, \u002731337\u0027, \u002731336\u0027]), set([\u0027191478\u0027, \u0027191479\u0027]), set([\u0027191049\u0027, \u0027191048\u0027])]), (\u002712140486\u0027, [set([\u0027148647\u0027, \u0027148980\u0027, \u0027148981\u0027, \u0027148982\u0027, \u0027148983\u0027, \u0027169531\u0027, \u0027148979\u0027]), set([\u0027191132\u0027, \u0027191131\u0027, \u0027191134\u0027, \u0027191558\u0027]), set([\u0027167374\u0027, \u0027167377\u0027, \u0027167371\u0027, \u0027167372\u0027, \u0027167373\u0027, \u0027174887\u0027, \u0027174884\u0027, \u0027174885\u0027, \u0027174883\u0027, \u0027190114\u0027, \u0027189703\u0027]), set([\u0027175063\u0027, \u0027175062\u0027, \u0027177364\u0027, \u0027177365\u0027, \u0027175064\u0027, \u0027182570\u0027, \u0027181792\u0027, \u0027181793\u0027, \u0027179873\u0027, \u0027179874\u0027, \u0027181797\u0027, \u0027181794\u0027, \u0027175056\u0027]), set([\u0027182539\u0027, \u0027182540\u0027, \u0027182541\u0027]), set([\u0027189942\u0027, \u0027189941\u0027]), set([\u002731339\u0027, \u002731341\u0027, \u002731337\u0027, \u002731336\u0027]), set([\u0027191478\u0027, \u0027191479\u0027]), set([\u0027191049\u0027, \u0027191048\u0027])]), (\u002712140487\u0027, [set([\u0027191132\u0027, \u0027191131\u0027, \u0027191134\u0027, \u0027191558\u0027]), set([\u0027167374\u0027, \u0027167377\u0027, \u0027167371\u0027, \u0027167372\u0027, \u0027167373\u0027, \u0027174887\u0027, \u0027174884\u0027, \u0027174885\u0027, \u0027174883\u0027, \u0027190114\u0027, \u0027189703\u0027]), set([\u0027175063\u0027, \u0027175062\u0027, \u0027177364\u0027, \u0027177365\u0027, \u0027175064\u0027, \u0027182570\u0027, \u0027181792\u0027, \u0027181793\u0027, \u0027179873\u0027, \u0027179874\u0027, \u0027181797\u0027, \u0027181794\u0027, \u0027175056\u0027]), set([\u0027148647\u0027, \u0027148980\u0027, \u0027148981\u0027, \u0027148982\u0027, \u0027148983\u0027, \u0027169531\u0027, \u0027148979\u0027]), set([\u0027182539\u0027, \u0027182540\u0027, \u0027182541\u0027]), set([\u0027189942\u0027, \u0027189941\u0027]), set([\u002731339\u0027, \u002731341\u0027, \u002731337\u0027, \u002731336\u0027]), set([\u0027191478\u0027, \u0027191479\u0027]), set([\u0027191049\u0027, \u0027191048\u0027])])]\n[0.06382978723404255, 0.08510638297872337, 0.2880523731587561, 0.1945288753799392, 0.0851063829787234, 0.0425531914893617, 0.06382978723404255, 0.0425531914893617, 0.0425531914893617]\n[0.1276595744680851, 0.2553191489361702, 0.5106382978723404, 0.2553191489361702, 0.0851063829787234, 0.0425531914893617, 0.1276595744680851, 0.0425531914893617, 0.0425531914893617]\n[4, 11, 13, 7, 3, 2, 4, 2, 2]\n"
      },
      "dateCreated": "Mar 4, 2016 11:29:50 PM",
      "dateStarted": "Mar 7, 2016 8:22:49 PM",
      "dateFinished": "Mar 7, 2016 8:22:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt",
      "dateUpdated": "Mar 5, 2016 12:00:19 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457135948777_682089683",
      "id": "20160304-235908_960367813",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "pyspark\r interpreter not found"
      },
      "dateCreated": "Mar 4, 2016 11:59:08 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nprint(graph_sc.count())\nprint(graph_degree_connectivity.take(10))\nprint(graph_degree_centrality.take(10))\nprint(graph_degree_centrality_mean.take(10))\nprint(graph_is_directed_acyclic_graph.take(10))\nprint(graph_is_weakly_connected.take(10))\n\n\nprint(graph_number_strongly_connected_components.take(10))\nprint(graph_number_weakly_connected_components.take(10))",
      "dateUpdated": "Mar 4, 2016 11:11:24 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457130771069_-1522212495",
      "id": "20160304-223251_1266850188",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "364\n[(\u002712140485\u0027, 0), (\u002712140486\u0027, 0), (\u002712140487\u0027, 0), (\u002712140488\u0027, 0), (\u002712140489\u0027, 0), (\u002712140490\u0027, 0), (\u002712140491\u0027, 0), (\u002712140492\u0027, 0), (\u002712140493\u0027, 0), (\u002712140494\u0027, 0)]\n[(\u002712140485\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u002731341\u0027: 0.1276595744680851, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2553191489361702, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2127659574468085, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2978723404255319, \u0027175062\u0027: 0.2553191489361702, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2978723404255319, \u0027174885\u0027: 0.0425531914893617, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2553191489361702, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.1276595744680851, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027182541\u0027: 0.0851063829787234, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140486\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2553191489361702, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2553191489361702, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2553191489361702, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u002731341\u0027: 0.1276595744680851, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2978723404255319, \u0027177365\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2553191489361702, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027182541\u0027: 0.0851063829787234, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140487\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2553191489361702, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2978723404255319, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2553191489361702, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2553191489361702, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2553191489361702, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.1276595744680851, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027167373\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140488\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.46808510638297873, \u0027181793\u0027: 0.46808510638297873, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.46808510638297873, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.46808510638297873, \u0027175062\u0027: 0.46808510638297873, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.46808510638297873, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.46808510638297873, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.46808510638297873, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.46808510638297873, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027182541\u0027: 0.0851063829787234, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140489\u0027, {\u0027191131\u0027: 0.043478260869565216, \u0027191134\u0027: 0.021739130434782608, \u0027174887\u0027: 0.043478260869565216, \u0027174884\u0027: 0.021739130434782608, \u0027174885\u0027: 0.021739130434782608, \u0027174883\u0027: 0.021739130434782608, \u0027181792\u0027: 0.45652173913043476, \u0027181793\u0027: 0.45652173913043476, \u0027148982\u0027: 0.17391304347826086, \u0027148983\u0027: 0.21739130434782608, \u0027181797\u0027: 0.45652173913043476, \u0027181794\u0027: 0.043478260869565216, \u0027182539\u0027: 0.08695652173913043, \u0027175063\u0027: 0.45652173913043476, \u0027175062\u0027: 0.45652173913043476, \u0027189941\u0027: 0.043478260869565216, \u0027148647\u0027: 0.08695652173913043, \u0027182540\u0027: 0.08695652173913043, \u0027175064\u0027: 0.2391304347826087, \u0027182570\u0027: 0.45652173913043476, \u0027167373\u0027: 0.043478260869565216, \u0027169531\u0027: 0.17391304347826086, \u0027148979\u0027: 0.2608695652173913, \u002731339\u0027: 0.043478260869565216, \u0027177364\u0027: 0.45652173913043476, \u002731341\u0027: 0.13043478260869565, \u002731337\u0027: 0.043478260869565216, \u002731336\u0027: 0.043478260869565216, \u0027189942\u0027: 0.043478260869565216, \u0027191558\u0027: 0.021739130434782608, \u0027191478\u0027: 0.043478260869565216, \u0027191479\u0027: 0.043478260869565216, \u0027190114\u0027: 0.13043478260869565, \u0027179873\u0027: 0.45652173913043476, \u0027179874\u0027: 0.45652173913043476, \u0027191049\u0027: 0.043478260869565216, \u0027191048\u0027: 0.043478260869565216, \u0027167374\u0027: 0.08695652173913043, \u0027148980\u0027: 0.2608695652173913, \u0027177365\u0027: 0.45652173913043476, \u0027167377\u0027: 0.043478260869565216, \u0027167371\u0027: 0.19565217391304346, \u0027167372\u0027: 0.13043478260869565, \u0027148981\u0027: 0.21739130434782608, \u0027182541\u0027: 0.08695652173913043, \u0027189703\u0027: 0.08695652173913043, \u0027175056\u0027: 0.5}), (\u002712140490\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027148980\u0027: 0.2553191489361702, \u0027181793\u0027: 0.46808510638297873, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.46808510638297873, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.46808510638297873, \u0027189942\u0027: 0.0425531914893617, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.46808510638297873, \u0027182570\u0027: 0.46808510638297873, \u0027167373\u0027: 0.0425531914893617, \u0027169531\u0027: 0.1702127659574468, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.46808510638297873, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027175062\u0027: 0.46808510638297873, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.46808510638297873, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027181792\u0027: 0.46808510638297873, \u0027177365\u0027: 0.46808510638297873, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027148981\u0027: 0.2127659574468085, \u0027182541\u0027: 0.0851063829787234, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140491\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2127659574468085, \u0027181793\u0027: 0.3829787234042553, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2127659574468085, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.3829787234042553, \u0027175062\u0027: 0.23404255319148937, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2765957446808511, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.23404255319148937, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.3191489361702128, \u0027179874\u0027: 0.2978723404255319, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.1276595744680851, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027148981\u0027: 0.2127659574468085, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140492\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.1702127659574468, \u0027181793\u0027: 0.2127659574468085, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.1276595744680851, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2127659574468085, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2127659574468085, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2978723404255319, \u0027179874\u0027: 0.2553191489361702, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.0851063829787234, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027148981\u0027: 0.2127659574468085, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140493\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u002731341\u0027: 0.1276595744680851, \u0027174883\u0027: 0.0425531914893617, \u0027148980\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2127659574468085, \u0027148982\u0027: 0.2127659574468085, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.1276595744680851, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2127659574468085, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2553191489361702, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.2127659574468085, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2127659574468085, \u0027174885\u0027: 0.0425531914893617, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.3404255319148936, \u0027179874\u0027: 0.2553191489361702, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027167374\u0027: 0.0851063829787234, \u0027181792\u0027: 0.1702127659574468, \u0027177365\u0027: 0.0851063829787234, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027148981\u0027: 0.2127659574468085, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140494\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027148980\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2127659574468085, \u0027148982\u0027: 0.2127659574468085, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.1276595744680851, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2765957446808511, \u0027175062\u0027: 0.2127659574468085, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2765957446808511, \u0027182570\u0027: 0.46808510638297873, \u0027167373\u0027: 0.0425531914893617, \u0027169531\u0027: 0.2127659574468085, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u0027191478\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2127659574468085, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u002731339\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.3404255319148936, \u0027179874\u0027: 0.2978723404255319, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027181792\u0027: 0.2127659574468085, \u0027177365\u0027: 0.0851063829787234, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027148981\u0027: 0.2127659574468085, \u0027182541\u0027: 0.0851063829787234, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404})]\n[0.1471631205673759, 0.1471631205673759, 0.14716312056737588, 0.18794326241134762, 0.17946345975948197, 0.1879432624113476, 0.14627659574468088, 0.1347517730496454, 0.1365248226950355, 0.1391843971631206]\n[(\u002712140485\u0027, False), (\u002712140486\u0027, False), (\u002712140487\u0027, False), (\u002712140488\u0027, False), (\u002712140489\u0027, False), (\u002712140490\u0027, False), (\u002712140491\u0027, False), (\u002712140492\u0027, False), (\u002712140493\u0027, False), (\u002712140494\u0027, False)]\n[(\u002712140485\u0027, False), (\u002712140486\u0027, False), (\u002712140487\u0027, False), (\u002712140488\u0027, False), (\u002712140489\u0027, False), (\u002712140490\u0027, False), (\u002712140491\u0027, False), (\u002712140492\u0027, False), (\u002712140493\u0027, False), (\u002712140494\u0027, False)]\n[(\u002712140485\u0027, 9), (\u002712140486\u0027, 9), (\u002712140487\u0027, 9), (\u002712140488\u0027, 9), (\u002712140489\u0027, 15), (\u002712140490\u0027, 9), (\u002712140491\u0027, 9), (\u002712140492\u0027, 9), (\u002712140493\u0027, 9), (\u002712140494\u0027, 9)]\n[(\u002712140485\u0027, 9), (\u002712140486\u0027, 9), (\u002712140487\u0027, 9), (\u002712140488\u0027, 9), (\u002712140489\u0027, 9), (\u002712140490\u0027, 9), (\u002712140491\u0027, 9), (\u002712140492\u0027, 9), (\u002712140493\u0027, 9), (\u002712140494\u0027, 9)]\n"
      },
      "dateCreated": "Mar 4, 2016 10:32:51 PM",
      "dateStarted": "Mar 4, 2016 11:11:24 PM",
      "dateFinished": "Mar 4, 2016 11:11:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//import org.apache.hadoop.conf.Configuration\r\n//import org.apache.hadoop.fs._\r\n\r\n//val hadoopConfig \u003d new Configuration()\r\n//hadoopConfig.addResource(new Path(\"/opt/hadoop-2.5.2/etc/hadoop/core-site.xml\"));\r\n//val hdfs \u003d FileSystem.get(new URL(\"hdfs://monarch-master:50070\"),hadoopConfig)\r\n//FileUtil.copyMerge(hdfs, new Path(\"hdfs://monarch-master/user/ubuntu/monitoring/Hazem/\"), hdfs, new Path(\"hdfs://monarch-master/user/ubuntu/monitoring/Hazem/collectedgraph.txt\"), false, hadoopConfig, null)",
      "dateUpdated": "Mar 1, 2016 1:00:47 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794035077_442110812",
      "id": "20160301-010035_894534681",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:00:35 AM",
      "dateStarted": "Mar 1, 2016 1:00:47 AM",
      "dateFinished": "Mar 1, 2016 1:00:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndf \u003d sqlc.createDataFrame(graph_number_strongly_connected_components.map(lambda x: (x[1], )),schema \u003d  [\u0027c\u0027])\n\n# Register to use in SQL\ndf.registerTempTable(\u0027graph_number_strongly_connected_components\u0027)",
      "dateUpdated": "Mar 7, 2016 8:00:41 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794047167_1944386701",
      "id": "20160301-010047_406727844",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:00:47 AM",
      "dateStarted": "Mar 7, 2016 8:00:41 PM",
      "dateFinished": "Mar 7, 2016 8:00:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect c, count(1) value\nfrom graph_number_strongly_connected_components\ngroup by c \norder by c",
      "dateUpdated": "Mar 7, 2016 8:40:26 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            }
          },
          "lineWithFocus": false
        },
        "enabled": true,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794055466_-1162460667",
      "id": "20160301-010055_539077724",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "c\tvalue\n9\t140\n10\t2\n11\t3\n13\t1\n15\t1\n19\t1\n26\t5\n27\t55\n28\t131\n29\t16\n30\t7\n31\t2\n"
      },
      "dateCreated": "Mar 1, 2016 1:00:55 AM",
      "dateStarted": "Mar 7, 2016 8:07:11 PM",
      "dateFinished": "Mar 7, 2016 8:07:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndf \u003d sqlc.createDataFrame(graph_degree_centrality_mean.map(lambda x: (x, )),schema \u003d  [\u0027c\u0027])\n\n# Register to use in SQL\ndf.registerTempTable(\u0027graph_degree_centrality_mean\u0027)",
      "dateUpdated": "Mar 7, 2016 8:08:50 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794065716_775534867",
      "id": "20160301-010105_1137661827",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:01:05 AM",
      "dateStarted": "Mar 7, 2016 8:08:50 PM",
      "dateFinished": "Mar 7, 2016 8:08:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect c, count(1) value\nfrom graph_degree_centrality_mean\ngroup by c \norder by c",
      "dateUpdated": "Mar 7, 2016 8:34:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457381312547_-1247255955",
      "id": "20160307-200832_1480401272",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "c\tvalue\n0.07142857142857138\t1\n0.07394957983193273\t1\n0.07460317460317456\t1\n0.07619047619047614\t1\n0.07936507936507933\t3\n0.07954545454545454\t1\n0.08067226890756297\t2\n0.0809523809523809\t1\n0.08235294117647053\t1\n0.08235294117647055\t2\n0.08377896613190727\t1\n0.0840336134453781\t1\n0.08412698412698408\t2\n0.08412698412698409\t1\n0.08571428571428566\t1\n0.08571428571428569\t2\n0.08730158730158724\t1\n0.08730158730158726\t1\n0.08730158730158727\t1\n0.08739495798319322\t1\n0.08739495798319324\t1\n0.08888888888888885\t1\n0.08907563025210079\t1\n0.09047619047619042\t1\n0.09047619047619043\t4\n0.092063492063492\t1\n0.09206349206349201\t7\n0.09206349206349203\t3\n0.0924369747899159\t1\n0.09269162210338677\t1\n0.09365079365079358\t1\n0.0936507936507936\t8\n0.09365079365079361\t1\n0.09411764705882346\t3\n0.09411764705882347\t1\n0.09447415329768268\t1\n0.09523809523809518\t6\n0.09523809523809519\t6\n0.09579831932773103\t4\n0.09579831932773104\t2\n0.09682539682539676\t2\n0.09682539682539677\t6\n0.09682539682539679\t1\n0.09747899159663859\t8\n0.0974789915966386\t2\n0.09747899159663861\t1\n0.09841269841269834\t4\n0.09841269841269835\t12\n0.09841269841269837\t3\n0.09841269841269838\t1\n0.09915966386554614\t1\n0.09915966386554616\t1\n0.09915966386554617\t1\n0.09982174688057037\t1\n0.09999999999999992\t3\n0.09999999999999995\t7\n0.09999999999999996\t3\n0.10084033613445371\t4\n0.10084033613445373\t2\n0.10158730158730152\t2\n0.10158730158730153\t1\n0.10158730158730155\t2\n0.10160427807486627\t3\n0.10252100840336126\t1\n0.10252100840336127\t1\n0.10252100840336129\t2\n0.10317460317460311\t6\n0.10317460317460313\t6\n0.10317460317460314\t1\n0.10416666666666667\t1\n0.10420168067226883\t1\n0.10420168067226886\t2\n0.1047619047619047\t4\n0.10476190476190471\t5\n0.10588235294117641\t1\n0.10634920634920626\t1\n0.10634920634920629\t1\n0.1063492063492063\t1\n0.10756302521008397\t2\n0.107563025210084\t3\n0.10793650793650787\t3\n0.10793650793650789\t2\n0.1079365079365079\t1\n0.10873440285204987\t1\n0.10924369747899153\t1\n0.10952380952380945\t1\n0.10952380952380947\t1\n0.10952380952380948\t1\n0.11111111111111105\t1\n0.11111111111111106\t2\n0.11229946524064167\t1\n0.11260504201680666\t1\n0.11269841269841267\t1\n0.11428571428571423\t1\n0.11587301587301581\t2\n0.11587301587301584\t1\n0.11764705882352935\t1\n0.119047619047619\t2\n0.1243697478991596\t1\n0.12499999999999993\t1\n0.12834224598930477\t1\n0.1285460992907801\t2\n0.1312056737588652\t2\n0.13120567375886522\t4\n0.13120567375886524\t1\n0.13209219858156024\t1\n0.13209219858156027\t3\n0.13297872340425523\t1\n0.13297872340425526\t2\n0.1329787234042553\t7\n0.13297872340425532\t3\n0.13386524822695028\t1\n0.1338652482269503\t2\n0.13386524822695037\t5\n0.13475177304964533\t5\n0.13475177304964536\t1\n0.1347517730496454\t11\n0.1356382978723404\t2\n0.13563829787234044\t2\n0.1365248226950354\t3\n0.13652482269503544\t7\n0.13652482269503546\t4\n0.1365248226950355\t6\n0.13741134751773046\t2\n0.1374113475177305\t2\n0.13741134751773051\t3\n0.13829787234042548\t3\n0.1382978723404255\t2\n0.13829787234042554\t6\n0.13829787234042556\t4\n0.1391843971631205\t1\n0.13918439716312053\t1\n0.13918439716312056\t4\n0.1391843971631206\t3\n0.13918439716312062\t2\n0.14007092198581556\t1\n0.14007092198581558\t1\n0.1400709219858156\t3\n0.14095744680851063\t2\n0.14184397163120563\t1\n0.14184397163120568\t2\n0.14273049645390073\t1\n0.14361702127659573\t1\n0.14361702127659576\t1\n0.14450354609929078\t1\n0.1453900709219858\t1\n0.14539007092198583\t2\n0.14627659574468088\t1\n0.14716312056737588\t3\n0.1471631205673759\t2\n0.14893617021276595\t1\n0.149822695035461\t1\n0.15070921985815602\t1\n0.15692307692307697\t1\n0.17946345975948197\t1\n0.18262411347517735\t2\n0.18262411347517737\t3\n0.1826241134751774\t4\n0.1879432624113476\t1\n0.18794326241134762\t1\n"
      },
      "dateCreated": "Mar 7, 2016 8:08:32 PM",
      "dateStarted": "Mar 7, 2016 8:09:02 PM",
      "dateFinished": "Mar 7, 2016 8:09:03 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nschemaPeople \u003d sqlContext.createDataFrame(mixed_list_RDD)\nschemaPeople.registerTempTable(\"mixed_list_RDD\")",
      "dateUpdated": "Mar 7, 2016 8:23:39 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457381342610_-764365437",
      "id": "20160307-200902_1628616442",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 7, 2016 8:09:02 PM",
      "dateStarted": "Mar 7, 2016 8:23:39 PM",
      "dateFinished": "Mar 7, 2016 8:23:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect Size, Centrality\nfrom mixed_list_RDD\ngroup by Size ,Centrality\norder by Size",
      "dateUpdated": "Mar 7, 2016 8:29:57 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "scatterChart",
          "height": 300.0,
          "optionOpen": true,
          "keys": [
            {
              "name": "Size",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Centrality",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Size",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "Centrality",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457382219375_-213917288",
      "id": "20160307-202339_790915129",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Size\tCentrality\n2\t0.0425531914893617\n3\t0.0851063829787234\n4\t0.1276595744680851\n7\t0.2553191489361702\n11\t0.2553191489361702\n13\t0.5106382978723404\n"
      },
      "dateCreated": "Mar 7, 2016 8:23:39 PM",
      "dateStarted": "Mar 7, 2016 8:28:18 PM",
      "dateFinished": "Mar 7, 2016 8:28:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457382253385_-1040342077",
      "id": "20160307-202413_1683977322",
      "dateCreated": "Mar 7, 2016 8:24:13 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Graph Matrix",
  "id": "2BCQUWRSX",
  "angularObjects": {
    "2BCEZ2KJP": [],
    "2BD3PUZZ8": [],
    "2BBVUYEMN": [],
    "2BC6TWRV2": [],
    "2BEWMTK13": [],
    "2BEPEH11C": [],
    "2BDMSC5AD": [],
    "2BEW8QC4D": [],
    "2BF95Q92B": [],
    "2BC911G5T": [],
    "2BEU9CPXA": [],
    "2BBXKT3NQ": [],
    "2BDPHN3Z4": [],
    "2BCDQN15Y": []
  },
  "config": {},
  "info": {}
}