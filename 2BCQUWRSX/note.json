{
  "paragraphs": [
    {
      "text": "// Import statements, hdfs paths and start and stop times\r\nimport breeze.numerics.sqrt\r\nimport ca.savitestbed.monarch.storage.HbaseDriver\r\nimport com.github.nscala_time.time.Imports._\r\nimport org.apache.spark.rdd.RDD\r\nimport org.apache.spark.sql.{DataFrame, SQLContext}\r\nimport org.apache.spark.SparkContext\r\n//import org.apache.spark.SparkConf\r\nimport ca.savitestbed.monarch.fileprocessor._\r\n//import org.apache.spark.SparkContext._\r\nimport org.apache.spark.graphx.{Graph, Edge}\r\n\r\nval hdfsfolders \u003d \"hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/0/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/1/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/2/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/3/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/4/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/5/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/6/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/7/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/8/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/9/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/10/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/11/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/12/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/13/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/14/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/15/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/16/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/17/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/18/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/19/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/20/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/21/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/22/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/23/*\" \r\n\r\nval startTime \u003d \"2016-03-01 01:00:00\"\r\nval endTime \u003d \"2016-03-22 23:59:00\"\r\n\r\nval hdfspaths \u003d hdfsfolders.split(\",\")",
      "dateUpdated": "Mar 9, 2016 4:49:24 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793879237_-1567827309",
      "id": "20160301-005759_907325495",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import breeze.numerics.sqrt\nimport ca.savitestbed.monarch.storage.HbaseDriver\nimport com.github.nscala_time.time.Imports._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.{DataFrame, SQLContext}\nimport org.apache.spark.SparkContext\nimport ca.savitestbed.monarch.fileprocessor._\nimport org.apache.spark.graphx.{Graph, Edge}\nhdfsfolders: String \u003d hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/0/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/1/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/2/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/3/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/4/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/5/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/6/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/7/*,hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/8/*,hdfs://monarch-master/user/ubuntu/mon...startTime: String \u003d 2016-03-01 01:00:00\nendTime: String \u003d 2016-03-22 23:59:00\nhdfspaths: Array[String] \u003d Array(hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/0/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/1/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/2/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/3/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/4/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/5/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/6/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/7/*, hdfs://monarch-master/user/ubuntu/monitoring/parquet/METER_NAME_HERE/2016/3/8/8/*, hdfs://monarch-ma..."
      },
      "dateCreated": "Mar 1, 2016 12:57:59 AM",
      "dateStarted": "Mar 9, 2016 4:49:24 PM",
      "dateFinished": "Mar 9, 2016 4:49:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// -------------------------------------------------------read the data objects till the openflow/networking part\r\nval rid_disctime__cpuutil \u003d VmCPUUtil.calculatePeriodAvgPerRidFromFile(sqlContext, hdfspaths, startTime, endTime).map(s \u003d\u003e ((s._1, s._2._1), s._2._2.toDouble)).coalesce(10)\r\nval rid_disctime__diskrb \u003d VmDiskReadByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__diskwb \u003d VmDiskWriteByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__netinbyte \u003d VmNetIncomingByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__netoutbyte \u003d VmNetOutgoingByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n  \r\n  \r\n\r\n// -------------------------------------------------------read the networking data objects\r\nval commPairDisctimeBwutil \u003d OFFlowBw.calculatePeriodAvgPerCommPairFromFile(sqlContext, hdfspaths, startTime, endTime)\r\nval macToRid \u003d Utils.getMacToVMRid(sqlContext)\r\nval ridToId \u003d Utils.getVMRidToID(sqlContext)\r\nval idToRid \u003d ridToId.map(ri \u003d\u003e (ri._2.toLong, ri._1))\r\n\r\n// (rid, (mac, id))\r\nval ridToMacId \u003d macToRid.map(mr \u003d\u003e (mr._2, mr._1)).join(ridToId)\r\nval macToId \u003d ridToMacId.map(rmi \u003d\u003e rmi._2)\r\n\r\n// produce (source Mac, ((des MAC, (discrete_time, average bandwidth)), srcVMid))\r\nval convertedSrcMac \u003d commPairDisctimeBwutil.map(p \u003d\u003e (p._1, (p._2, p._3))).join(macToId)\r\n\r\n// produce (dst Mac, ((srcVMId, (discrete_time, average bandwidth)), dstVMId))\r\nval convertedSrcDstMac \u003d convertedSrcMac.map(p \u003d\u003e (p._2._1._1, (p._2._2, p._2._1._2))).join(macToId)\r\n\r\n//((srcVMId, dstVMId, discrete_time), BW)\r\nval idToIdDisctimeBw \u003d convertedSrcDstMac.map(p \u003d\u003e ((p._2._1._1, p._2._2, p._2._1._2._1), p._2._1._2._2))\r\n  .reduceByKey((a, b) \u003d\u003e a+b)\r\n\r\n// Produce ((rid, dt), value)\r\nval sendBWDisctimeBW \u003d idToIdDisctimeBw\r\n  .map(p \u003d\u003e ((p._1._1, p._1._3), p._2))\r\n  .reduceByKey((a, b) \u003d\u003e a+b)\r\n  .map(f \u003d\u003e (f._1._1, (f._1._2, f._2)))\r\n  .join(idToRid)//(id, ((dt, value), rid))\r\n  .map(f \u003d\u003e ((f._2._2, f._2._1._1), f._2._1._2))\r\n\r\n// Produce ((rid, dt), value)\r\nval receiveBWDisctimeBW \u003d idToIdDisctimeBw\r\n  .map(p \u003d\u003e ((p._1._2, p._1._3), p._2))\r\n  .reduceByKey((a, b) \u003d\u003e a+b)\r\n  .map(f \u003d\u003e (f._1._1, (f._1._2, f._2)))\r\n  .join(idToRid)//(id, ((dt, value), rid))\r\n  .map(f \u003d\u003e ((f._2._2, f._2._1._1), f._2._1._2))\r\n  \r\n  \r\n//-------------------------------------------------join the data objects\r\nval rid_dt__2:RDD[((String, Long), Array[Double])] \u003d rid_disctime__cpuutil.join(rid_disctime__diskrb)\r\n      .filter(s \u003d\u003e s._2._1.isInstanceOf[Double] \u0026\u0026 s._2._2.isInstanceOf[Double])\r\n      .map(s \u003d\u003e (s._1, Array[Double](s._2._1, s._2._2)))\r\n\r\nval rid_dt__3:RDD[((String, Long), Array[Double])] \u003d rid_dt__2.join(rid_disctime__diskwb)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__4:RDD[((String, Long), Array[Double])] \u003d rid_dt__3.join(rid_disctime__netinbyte)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__5:RDD[((String, Long), Array[Double])] \u003d rid_dt__4.join(rid_disctime__netoutbyte)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__6:RDD[((String, Long), Array[Double])] \u003d rid_dt__5.join(receiveBWDisctimeBW)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n\r\nval rid_dt__7:RDD[((String, Long), Array[Double])] \u003d rid_dt__6.join(sendBWDisctimeBW)\r\n  .map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\n  \r\n  \r\n  \r\n//-----------------------------------------------some processing needed for the graph generation\r\nval ridIdJoin \u003d rid_dt__7.map(s \u003d\u003e (s._1._1, (s._1._2, s._2))).join(ridToId)\r\nval idDtData \u003d ridIdJoin.map(s \u003d\u003e ((s._2._2,s._2._1._1), s._2._1._2))\r\n//(time,(Array,id))\r\nval DtDataid \u003d idDtData.map(s \u003d\u003e (s._1._2,(s._2,s._1._1)))\r\n//(time,(id,Array))\r\nval DtidData \u003d idDtData.map(s \u003d\u003e (s._1._2,(s._1._1,s._2)))\r\n//(time,((srcid,destid),BW))\r\nval DtSrcIdDstIdBW \u003d idToIdDisctimeBw.map(s \u003d\u003e (s._1._3,((s._1._1,s._1._2),s._2)))",
      "dateUpdated": "Mar 9, 2016 4:49:31 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793900394_2133872508",
      "id": "20160301-005820_2046802124",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "rid_disctime__cpuutil: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2208] at coalesce at \u003cconsole\u003e:81\nrid_disctime__diskrb: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2228] at coalesce at \u003cconsole\u003e:80\nrid_disctime__diskwb: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2248] at coalesce at \u003cconsole\u003e:80\nrid_disctime__netinbyte: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2268] at coalesce at \u003cconsole\u003e:80\nrid_disctime__netoutbyte: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d CoalescedRDD[2288] at coalesce at \u003cconsole\u003e:80\ncommPairDisctimeBwutil: org.apache.spark.rdd.RDD[(String, String, (Long, Double), String)] \u003d MapPartitionsRDD[2302] at map at OFFlowBase.scala:185\nmacToRid: org.apache.spark.rdd.RDD[(String, String)] \u003d MapPartitionsRDD[2307] at map at Utils.scala:31\nridToId: org.apache.spark.rdd.RDD[(String, Long)] \u003d MapPartitionsRDD[2312] at map at Utils.scala:38\nidToRid: org.apache.spark.rdd.RDD[(Long, String)] \u003d MapPartitionsRDD[2313] at map at \u003cconsole\u003e:74\nridToMacId: org.apache.spark.rdd.RDD[(String, (String, Long))] \u003d MapPartitionsRDD[2317] at join at \u003cconsole\u003e:78\nmacToId: org.apache.spark.rdd.RDD[(String, Long)] \u003d MapPartitionsRDD[2318] at map at \u003cconsole\u003e:78\nconvertedSrcMac: org.apache.spark.rdd.RDD[(String, ((String, (Long, Double)), Long))] \u003d MapPartitionsRDD[2322] at join at \u003cconsole\u003e:92\nconvertedSrcDstMac: org.apache.spark.rdd.RDD[(String, ((Long, (Long, Double)), Long))] \u003d MapPartitionsRDD[2326] at join at \u003cconsole\u003e:94\nidToIdDisctimeBw: org.apache.spark.rdd.RDD[((Long, Long, Long), Double)] \u003d ShuffledRDD[2328] at reduceByKey at \u003cconsole\u003e:97\nsendBWDisctimeBW: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d MapPartitionsRDD[2335] at map at \u003cconsole\u003e:105\nreceiveBWDisctimeBW: org.apache.spark.rdd.RDD[((String, Long), Double)] \u003d MapPartitionsRDD[2342] at map at \u003cconsole\u003e:105\nrid_dt__2: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2347] at map at \u003cconsole\u003e:89\nrid_dt__3: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2351] at map at \u003cconsole\u003e:90\nrid_dt__4: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2355] at map at \u003cconsole\u003e:94\nrid_dt__5: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2359] at map at \u003cconsole\u003e:98\nrid_dt__6: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2363] at map at \u003cconsole\u003e:120\nrid_dt__7: org.apache.spark.rdd.RDD[((String, Long), Array[Double])] \u003d MapPartitionsRDD[2367] at map at \u003cconsole\u003e:124\nridIdJoin: org.apache.spark.rdd.RDD[(String, ((Long, Array[Double]), Long))] \u003d MapPartitionsRDD[2371] at join at \u003cconsole\u003e:128\nidDtData: org.apache.spark.rdd.RDD[((Long, Long), Array[Double])] \u003d MapPartitionsRDD[2372] at map at \u003cconsole\u003e:126\nDtDataid: org.apache.spark.rdd.RDD[(Long, (Array[Double], Long))] \u003d MapPartitionsRDD[2373] at map at \u003cconsole\u003e:129\nDtidData: org.apache.spark.rdd.RDD[(Long, (Long, Array[Double]))] \u003d MapPartitionsRDD[2374] at map at \u003cconsole\u003e:129\nDtSrcIdDstIdBW: org.apache.spark.rdd.RDD[(Long, ((Long, Long), Double))] \u003d MapPartitionsRDD[2375] at map at \u003cconsole\u003e:97\n"
      },
      "dateCreated": "Mar 1, 2016 12:58:20 AM",
      "dateStarted": "Mar 9, 2016 4:49:31 PM",
      "dateFinished": "Mar 9, 2016 4:50:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// (time:long, Iterable[(id:long, data:Array[Double])])\nval verticesbytime \u003d DtidData.groupByKey()\n// (time:long, Iterbale[((srcid:long, destid:long),BW)])\nval edgesbytime \u003d DtSrcIdDstIdBW.groupByKey()\n// (time: Long, (vertices: (id: Long, data: Array[Double]), edges: ((srcid: Long, destid: Long), BW: double)))\nval graphelementsbytime \u003d verticesbytime.join(edgesbytime)",
      "dateUpdated": "Mar 9, 2016 4:50:53 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793954008_-1368603999",
      "id": "20160301-005914_2088002055",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "verticesbytime: org.apache.spark.rdd.RDD[(Long, Iterable[(Long, Array[Double])])] \u003d ShuffledRDD[2376] at groupByKey at \u003cconsole\u003e:131\nedgesbytime: org.apache.spark.rdd.RDD[(Long, Iterable[((Long, Long), Double)])] \u003d ShuffledRDD[2377] at groupByKey at \u003cconsole\u003e:99\ngraphelementsbytime: org.apache.spark.rdd.RDD[(Long, (Iterable[(Long, Array[Double])], Iterable[((Long, Long), Double)]))] \u003d MapPartitionsRDD[2380] at join at \u003cconsole\u003e:137\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:14 AM",
      "dateStarted": "Mar 9, 2016 4:50:53 PM",
      "dateFinished": "Mar 9, 2016 4:50:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import breeze.linalg._\nobject MyFunctions {\n    def getLaplacEigen(s: Tuple2[Iterable[(Long, Array[Double])],Iterable[((Long, Long), Double)]]) \u003d{\n        //s match {\n        //    case (v, e) \u003d\u003e {\n        //        val ve \u003d v.toSeq\n        //        val ee \u003d e.toSeq\n                //val vertices \u003d sc.parallelize(v.toSeq)\n                //val edges \u003d sc.parallelize(e.toSeq).map(x \u003d\u003e Edge(x._1._1,x._1._2,x._2))\n                //val graphPerT:Graph[Array[Double], Double] \u003d Graph(vertices, edges)\n        //        println(s)\n        //    }\n        //}\n        val vertices \u003d s._1.toSeq\n        val edges \u003d s._2.toSeq\n        //val graphPerT:Graph[Array[Double], Double] \u003d Graph(vertices, edges)\n        \n        val Adj_A \u003d build_Adj(vertices, edges)\n        val Deg_A \u003d build_Deg(vertices, edges)\n        Deg_A\n    }\n    \n    def build_Adj(verticeseq: Seq[(Long, Array[Double])], edgeseq: Seq[((Long, Long), Double)]) \u003d {\n        var Adj_A \u003d DenseMatrix.zeros[Double](verticeseq.size,verticeseq.size)\n        for (edge \u003c- edgeseq){\n            Adj_A(verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._1).get),verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._2).get)) \u003d 1\n            Adj_A(verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._2).get),verticeseq.indexOf(verticeseq.find(_._1 \u003d\u003d edge._1._1).get)) \u003d 1\n            \n        }\n        Adj_A\n    }\n    \n    def build_Deg(verticeseq: Seq[(Long, Array[Double])], edgeseq: Seq[((Long, Long), Double)]) \u003d {\n        var Deg_A \u003d DenseMatrix.zeros[Double](verticeseq.size,verticeseq.size)\n        for (v \u003c- verticeseq){\n            Deg_A(verticeseq.indexOf(v),verticeseq.indexOf(v)) \u003d edgeseq.count(x \u003d\u003e x._1._1 \u003d\u003d v._1 || x._1._2 \u003d\u003d v._1)\n        }\n        Deg_A\n    }\n    \n    def Graphtxt(s: Tuple2[Iterable[(Long, Array[Double])],Iterable[((Long, Long), Double)]])\u003d {\n        val vertices \u003d s._1.map(s \u003d\u003e (\"Vetrex\",s._1,s._2.mkString))\n        val edges \u003d s._2.map(s\u003d\u003e (\"edge\",s._1,s._2))\n        \n        (vertices, edges)\n    }\n}",
      "dateUpdated": "Mar 9, 2016 4:50:57 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793965985_1654768182",
      "id": "20160301-005925_581217075",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import breeze.linalg._\ndefined module MyFunctions\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:25 AM",
      "dateStarted": "Mar 9, 2016 4:50:57 PM",
      "dateFinished": "Mar 9, 2016 4:50:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// (time, graph)\nval graphPerT \u003d graphelementsbytime.map(s \u003d\u003e MyFunctions.getLaplacEigen(s._2))\nval graphText \u003d graphelementsbytime.map(s \u003d\u003e (s._1, MyFunctions.Graphtxt(s._2)))",
      "dateUpdated": "Mar 9, 2016 4:51:07 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793980969_-1653323643",
      "id": "20160301-005940_1253135344",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "graphPerT: org.apache.spark.rdd.RDD[breeze.linalg.DenseMatrix[Double]] \u003d MapPartitionsRDD[2381] at map at \u003cconsole\u003e:144\ngraphText: org.apache.spark.rdd.RDD[(Long, (Iterable[(String, Long, String)], Iterable[(String, (Long, Long), Double)]))] \u003d MapPartitionsRDD[2382] at map at \u003cconsole\u003e:143\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:40 AM",
      "dateStarted": "Mar 9, 2016 4:51:07 PM",
      "dateFinished": "Mar 9, 2016 4:51:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "graphText.take(2).foreach(println)\ngraphText.saveAsTextFile(\"hdfs://monarch-master/user/ubuntu/monitoring/Hazem/graph0803.txt\")",
      "dateUpdated": "Mar 9, 2016 4:51:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456793995781_-338221254",
      "id": "20160301-005955_1457858959",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "(12145560,(List((Vetrex,167374,10.4548592126845270.09816.8595041322315377034.3388429765467067.7768595045211449.0208333335457774.591666667), (Vetrex,167373,0.60.00.014.828.014.828.0), (Vetrex,181792,0.78370727979994450.05700.266666666666148.15833333333333915.3333333333334141.75035387177354911.9875), (Vetrex,182540,11.7403954802259880.04164.2666666666661474.2751805.85833333333331442.25122950819671818.6583333333335), (Vetrex,175062,0.61221751412429381044980.62222222228677.966101694916238.924369747899161276.3236.016666666666681275.2), (Vetrex,31341,1.11643835616438340.09898.66666666666846.5833333333333332.32876712328767634.0526.336065573770494), (Vetrex,167377,0.71601731601731590.00.016322.1176470588255677867.65088757416349.7958333333345678062.487499999), (Vetrex,148980,0.13634499726626570.0750.933333333333419.537190082644628116.4166666666666713.9113.1), (Vetrex,31339,1.3093750.07987.214.93081761006289414.66259.12540983606557511.7), (Vetrex,190114,0.92948717948717940.03276.882.5641025641025743.6410256410256484.044.400000000000006), (Vetrex,167372,12.6749999999999990.00.05660930.51255660941.61255655678.9583333335667065.441666666), (Vetrex,31337,1.29116222760290530.06177.94475138121514.92561983471074414.5454545454545458.7737704918032811.35), (Vetrex,191132,0.90990990990990990.01660.540540540540432.11818181818182197.189189189189232.06666666666667198.8), (Vetrex,148979,41.092092673592120.06417.0666666666675600.2666666666662221.866666666667787.3327868852459203.8), (Vetrex,174884,15.3873873873873850.00.02381097.108108108110918.486486486482380291.416666667110477.28333333333), (Vetrex,189941,24.71133879781420745.25966850828729193155.1735537193726.46961325966873164.43801652892533717.3753168.875), (Vetrex,181793,0.66840277777777770.05860.943089430894619.813008130081442128.40650406504627.057587582379529038.324999999997), (Vetrex,179873,1.0362737969328397659489.03225806454558.451612903225818.185483870967862259.87096774193595.108333333333352000.916666666664), (Vetrex,189703,35.132267441860460.07668.0930232558145732625.8139534884359110.3888888895731941.4541666664976030.983333333), (Vetrex,191048,29.760997267759564930406.3999999999218577.454545454533682.06666666666663158.66115702479373634.1791666666673164.625), (Vetrex,148983,0.23717948717948720.01348.0506329113923191.78481012658227421.37974683544303191.2414.2327868852459), (Vetrex,182539,27.9525316455696182817.630573248408360422.07594936715663.9493670886074757.7721518987355650.7416666666674747.242896174863), (Vetrex,191479,2.0046106557377050.03193.4915254237294126.2333333333345725.2644628099184158.3583333333345769.833333333334), (Vetrex,148647,0.233504098360655720.08699.76859504132248.61157024793388475.8842975206611543.072.0), (Vetrex,189942,11.2279590419993060.04442.1408450704233826.8088235294123971.03168.8753717.375), (Vetrex,174883,3.80861835286614040.00.0434260.441441441520574.288288288288432529.091666666720791.36666666667), (Vetrex,148981,0.131250.0563.216.35129.113924050632913.9113.45), (Vetrex,177365,0.775390625362464.49230769237435.815384615385147.56923076923076955.5625145.1125974.0496081208195), (Vetrex,182570,3.08437499999999960.012868.26666666666693900.633333333332422.516666666666485553.258333333332428.1), (Vetrex,175064,0.93693693693693681039129.36936936956568.360360360361255.666666666666661066.2072072072074252.866666666666651059.1916666666666), (Vetrex,167371,16.0750.00.05728349.8734177225656728.8755666486.1255667075.591666667), (Vetrex,148982,0.23575489159175040.01255.225806451613171.24193548387095211.56451612903226165.9199.45), (Vetrex,169531,0.27083333333333330.0688.403361344537914.319327731092436115.0169491525423813.9113.1), (Vetrex,179874,0.95527522935779821058195.96330275225213.090909090909140.8090909090909759.4636363636364128.125738.3166666666667), (Vetrex,175056,4.9760416666666670.0120408.859504132246032.30833333333253347.85714285714276238.14166666666553343.8416666666667), (Vetrex,175063,1.01232813326282381048642.60162601645747.612903225806249.87096774193551185.3739837398373243.191666666666661181.3416666666667), (Vetrex,191049,2.84623195920836560.03757.2330827067673087.10606060606053571.60606060606053164.6253634.179166666667), (Vetrex,191131,1.49549549549549550.01623.6396396396394201.2162162162162232.42342342342342198.832.06666666666667), (Vetrex,181794,0.25650614754098360.06093.2231404958675461.88429752066116290.19834710743805436.58333333333337266.89166666666665), (Vetrex,182541,15.4273907103825150.04400.6611570247933538.63636363636354173.5753417.9833333333333945.075), (Vetrex,174885,9.09909909909910.00.01328586.828828828961018.306306306311341607.77561448.13333333333), (Vetrex,174887,8.9322033898305090.00.01262568.558288.655462184881260850.77558484.933333333334), (Vetrex,31336,1.27568306010928940.08801.32231404958714.92561983471074414.5454545454545458.43688524590163911.0), (Vetrex,177364,0.8762807377049181008360.72727272724812.8127.80165289256199847.603305785124129.74166666666667854.6666666666667), (Vetrex,191478,21.6333333333333330.0206131.26486.34244.2148760330585769.8333333333344158.358333333334), (Vetrex,181797,0.65358711416022950.06616.615384615385170.21764705882353825.4736842105264154.05833333333334808.1833333333335)),List((edge,(31341,31337),8.77377049180328), (edge,(191479,191478),5769.833333333334), (edge,(182570,175056),1061.2666666666667), (edge,(175056,181797),82.35833333333333), (edge,(179874,175056),381.31666666666666), (edge,(181792,175062),0.0), (edge,(31341,31336),8.436885245901639), (edge,(181792,177365),0.3458333333333333), (edge,(175064,177365),0.0), (edge,(181797,179874),3.1333333333333337), (edge,(167373,190114),28.0), (edge,(167371,174885),1341607.775), (edge,(175056,177365),99.0), (edge,(167374,167372),5403895.625), (edge,(148982,148979),113.45), (edge,(175062,177364),0.0), (edge,(189941,189942),3168.875), (edge,(181792,175064),8.916666666666668), (edge,(182540,182539),1817.9583333333335), (edge,(175056,182570),1730.4333333333332), (edge,(175056,177364),83.275), (edge,(182570,181792),42.63333333333333), (edge,(167371,174883),432529.0916666667), (edge,(179874,182570),350.8666666666667), (edge,(175056,175064),189.54999999999998), (edge,(148979,148647),43.0), (edge,(182570,177365),42.63333333333333), (edge,(177365,182570),545.5333333333333), (edge,(179874,177365),0.0), (edge,(181793,175056),393.45), (edge,(175056,179874),82.35833333333333), (edge,(182539,182540),1329.95956284153), (edge,(181797,177365),0.0), (edge,(179873,182570),51594.5), (edge,(175062,175056),723.8333333333334), (edge,(169531,148979),113.1), (edge,(31339,31341),11.7), (edge,(189703,167374),4959681.1875), (edge,(182541,182540),112.29166666666667), (edge,(175063,182570),457.93333333333334), (edge,(181793,182570),28633.50833333333), (edge,(174884,167371),110477.28333333333), (edge,(148979,148981),13.9), (edge,(179873,181797),8.566666666666666), (edge,(181793,181797),7.533333333333333), (edge,(174885,167371),61448.13333333333), (edge,(175063,177364),3.8333333333333335), (edge,(177364,175056),389.23333333333335), (edge,(175063,175064),6.833333333333333), (edge,(179873,175063),0.0), (edge,(182541,182539),3832.7833333333333), (edge,(181797,175056),385.05), (edge,(174887,167371),58484.933333333334), (edge,(182570,175064),43.733333333333334), (edge,(175062,181793),6.833333333333333), (edge,(177365,181797),0.0), (edge,(175064,175056),703.4583333333333), (edge,(174883,167371),20791.36666666667), (edge,(175063,179873),0.0), (edge,(182570,181797),42.63333333333333), (edge,(181792,179874),0.0), (edge,(31341,31339),9.125409836065575), (edge,(182570,181793),525.5333333333333), (edge,(175062,182570),544.5333333333333), (edge,(177365,179873),6.133333333333334), (edge,(175056,175063),189.89166666666665), (edge,(175064,181792),8.916666666666668), (edge,(182539,182541),3417.2833333333333), (edge,(182570,175063),42.63333333333333), (edge,(167372,167374),251767.8333333333), (edge,(167371,174884),2380291.416666667), (edge,(179874,181797),6.133333333333334), (edge,(175064,181797),6.833333333333333), (edge,(167371,167372),251768.53333333333), (edge,(191132,191131),198.8), (edge,(182570,179874),42.63333333333333), (edge,(167377,189703),5678062.487499999), (edge,(175056,181792),89.625), (edge,(167371,190114),28.0), (edge,(190114,167371),14.8), (edge,(167372,190114),28.0), (edge,(148979,148980),13.9), (edge,(175064,177364),0.0), (edge,(182540,182541),0.7), (edge,(175056,175062),189.55), (edge,(177364,175062),0.0), (edge,(148979,148983),105.2), (edge,(175056,181793),89.94166666666668), (edge,(175064,182570),336.15), (edge,(175064,175063),3.8333333333333335), (edge,(181794,175056),266.89166666666665), (edge,(167374,189703),53878.96666666667), (edge,(148982,148983),86.0), (edge,(181792,181797),0.0), (edge,(31336,31341),11.0), (edge,(175056,181794),436.58333333333337), (edge,(191049,191048),3634.179166666667), (edge,(191048,191049),3164.625), (edge,(148983,148979),262.2327868852459), (edge,(177365,179874),0.0), (edge,(181792,175056),404.5916666666667), (edge,(181793,177365),0.0), (edge,(177365,175056),421.59166666666664), (edge,(181797,182570),403.0666666666667), (edge,(182570,177364),42.63333333333333), (edge,(181797,179873),8.566666666666666), (edge,(179873,175056),394.71666666666664), (edge,(148647,148979),72.0), (edge,(175062,181792),0.0), (edge,(177364,175063),6.833333333333333), (edge,(189942,189941),3717.375), (edge,(179873,177365),3.1333333333333333), (edge,(182570,179873),499.1333333333333), (edge,(181797,181793),4.533333333333333), (edge,(177365,181793),0.21592091571279917), (edge,(179874,181792),0.0), (edge,(148979,169531),13.9), (edge,(190114,167372),14.8), (edge,(175063,175056),712.7416666666667), (edge,(181797,181792),0.0), (edge,(181793,175062),3.8333333333333335), (edge,(148980,148979),113.1), (edge,(31337,31341),11.35), (edge,(190114,167373),14.8), (edge,(177365,181792),0.575353871773522), (edge,(189703,167377),16349.795833333334), (edge,(191478,191479),4158.358333333334), (edge,(167372,167371),5415269.608333333), (edge,(148983,148982),152.0), (edge,(181797,175064),3.8333333333333335), (edge,(191131,191132),32.06666666666667), (edge,(148979,148982),13.9), (edge,(167371,174887),1260850.775), (edge,(175056,179873),81.275), (edge,(175062,175063),0.0), (edge,(177365,175064),0.0), (edge,(177364,175064),0.0), (edge,(181792,182570),498.1333333333333), (edge,(148981,148979),113.45), (edge,(182570,175062),42.63333333333333), (edge,(177364,182570),458.6))))\n(12145380,(List((Vetrex,167374,10.4729166666666660.08970.5785123966945376822.4666666675473268.7333333335204215.0458333335485503.775), (Vetrex,167373,0.60254629629629620.00.018.7654320987654330.04938271604938314.828.0), (Vetrex,181792,0.79479166666666670.04846.933333333333130.03333333333333899.6833333333333127.925900.0666666666667), (Vetrex,182540,11.985663841807910.04646.722689075631544.83193277310921854.65546218487381517.71666666666671782.8666666666666), (Vetrex,175062,0.64123714920811331023830.74380165295734.4244.18181818181821274.2596685082872243.049999999999981276.2083333333333), (Vetrex,31341,0.94943270735524250.09614.22222222222342.0419580419580430.0138888888888934.7526.9), (Vetrex,167377,0.75555718443498030.00.015858.7542857142855703147.65876777316167.4255674324.25), (Vetrex,148980,0.137468741317032520.0648.533333333333320.299999999999997117.0333333333333313.9113.1), (Vetrex,31339,1.22503858024691370.06640.09937888198717.40372670807453316.298136645962739.212.05), (Vetrex,190114,0.98051948051948030.03244.883116883116682.5641025641025744.2077922077922184.044.400000000000006), (Vetrex,167372,12.3333333333333320.00.05660624.5679012345660730.1111111115680265.4833333345675130.016666666), (Vetrex,31337,1.30833333333333310.08021.33333333333316.6611570247933915.7666666666666668.8511.350000000000001), (Vetrex,191132,0.86160714285714290.01771.243243243243132.42342342342342201.2162162162162232.06666666666667198.8), (Vetrex,148979,41.331307307585430.05734.45691.252259.316666666667788.8000000000001205.45000000000002), (Vetrex,174884,15.7027027027027040.00.02385672.109090909108592.882882882882377857.4833333334108864.71666666666), (Vetrex,189941,24.4291666666666640.0190584.47058823533879.21666666666673282.06666666666663862.3541666666663393.258333333333), (Vetrex,181793,0.66190232240437150.05036.065573770492634.454545454545542785.44628099174474.758333333333336097.183333333334), (Vetrex,179873,1.01512096774193551048576.04325.376694.055455.17741935484779.691666666666766623.90833333333), (Vetrex,189703,35.1716632355464040.05632.05333884.8015267184931209.0081300815728891.1916666664971068.620833334), (Vetrex,191048,30.2041666666666661120746.8429752067200912.27118644073847.13223140495853393.24166666666633895.5708333333333404.758333333333), (Vetrex,148983,0.246753246753246750.01268.4387096774194190.81290322580645412.7741935483871191.2416.4), (Vetrex,182539,25.38311688311688577.6410256410256395982.129870129875474.9610389610394427.4935064935075473.5166666666664513.9), (Vetrex,191479,2.21666666666666630.02935.46666666666673916.69166666666665628.6833333333333963.35994.991666666667), (Vetrex,148647,0.262499999999999960.08908.848.30000000000000474.6942148760330643.072.0), (Vetrex,189942,11.4367558276035530.04690.5806451612913297.052238805973813.3140495867773393.2583333333333862.354166666666), (Vetrex,174883,3.729729729729730.00.0425765.7909090909520357.711711711712425460.5520511.88333333333), (Vetrex,148981,0.203733766233766270.0634.219354838709713.548387096774194109.3161290322580813.9113.1), (Vetrex,177365,0.74134615384615381036288.05671.384615384615143.97692307692307944.8135.36666666666667951.0000000000001), (Vetrex,182570,3.01666666666666660.012458.66666666666693934.52457.5416666666665107219.566666666672464.525), (Vetrex,175064,1.01689189189189191039129.36936936956752.864864864865267.65454545454551083.6756756756756253.61666666666671064.8833333333332), (Vetrex,167371,15.6543209876543210.00.05668817.6913580245668846.4320987655674275.5166666665675139.733333333), (Vetrex,148982,0.212205581157194070.01179.6480000000001170.72197.76167.55199.1), (Vetrex,169531,0.154166666666666670.0750.933333333333414.200000000000001113.1000000000000113.9113.1), (Vetrex,179874,1.0183486238532111043653.28440366965110.605504587155122.9909090909091684.0909090909091127.925740.1833333333333), (Vetrex,175056,4.757701502732240.0126805.333333333346035.52917.3666666666676029.7333333333342929.0833333333335), (Vetrex,175063,1.09820696721311471064892.29752066136614.0327868852455246.360655737704921186.190082644628244.6751182.5083333333332), (Vetrex,191049,2.9098466003316750.04027.1596638655463162.33606557377063830.17543859649143404.7583333333333895.570833333333), (Vetrex,191131,1.47747747747747750.01476.036036036036197.189189189189231.82882882882883198.832.06666666666667), (Vetrex,181794,0.254166666666666650.04915.251.08333333333333658.09917355371900515.53333333333333340.13333333333333), (Vetrex,182541,15.4706863017504870.04302.52100840336153109.21666666666673711.6253109.52499999999963803.991666666667), (Vetrex,174885,9.4454545454545450.00.01344445.954751131160820.981818181821347382.924999999860703.26666666666), (Vetrex,174887,9.140163934426230.00.01262551.368852459158599.933884297521275096.92558392.683333333334), (Vetrex,31336,1.16666666666666650.08430.93333333333414.5514.6666666666666668.8511.35), (Vetrex,177364,0.86074112021857911035847.93388429764773.02479338843158.38842975206612874.0743801652893157.94166666666666877.6333333333333), (Vetrex,191478,21.2938316198944120.0184012.85702.0083333333334080.5666666666675994.9916666666673963.3), (Vetrex,181797,0.66818313409441820.04657.737142857143147.5851.264367816092141.59166666666667804.0583333333334)),List((edge,(191049,191048),3895.570833333333), (edge,(190114,167371),14.8), (edge,(181793,179873),3.1333333333333333), (edge,(167371,190114),28.0), (edge,(190114,167373),14.8), (edge,(177365,181793),6.483333333333333), (edge,(179874,177365),0.0), (edge,(175064,175056),710.55), (edge,(177364,175056),400.33333333333337), (edge,(175056,177365),82.86666666666667), (edge,(182570,175062),42.63333333333333), (edge,(181793,177365),3.4833333333333334), (edge,(182541,182539),3691.35), (edge,(167371,174883),425460.55), (edge,(175056,179874),81.45833333333334), (edge,(182540,182539),1782.1666666666665), (edge,(181797,182570),404.23333333333335), (edge,(182570,179874),42.63333333333333), (edge,(148981,148979),113.1), (edge,(175062,181793),5.433333333333334), (edge,(167372,167374),249313.84999999998), (edge,(175064,181797),6.833333333333333), (edge,(175064,182570),336.15), (edge,(177364,175064),7.866666666666666), (edge,(148983,148979),264.4), (edge,(175063,175064),0.0), (edge,(181792,182570),499.29999999999995), (edge,(181792,175056),393.93333333333334), (edge,(182539,182540),1405.075), (edge,(175063,182570),459.09999999999997), (edge,(189703,167374),4954901.195833334), (edge,(189941,189942),3393.258333333333), (edge,(179874,175064),0.0), (edge,(182570,175056),1070.9083333333333), (edge,(169531,148979),113.1), (edge,(177364,179874),0.0), (edge,(181793,175064),6.133333333333334), (edge,(31341,31339),9.2), (edge,(181797,181792),0.0), (edge,(191132,191131),198.8), (edge,(175056,182570),1737.2166666666667), (edge,(167371,167372),249313.85000000003), (edge,(191048,191049),3404.758333333333), (edge,(175064,181792),0.0), (edge,(148982,148983),86.0), (edge,(182540,182541),0.7), (edge,(177365,177364),4.075), (edge,(189703,167377),16167.425), (edge,(177364,182570),459.21666666666664), (edge,(175056,175062),190.79999999999998), (edge,(182570,179873),679.5), (edge,(31336,31341),11.35), (edge,(175056,181792),81.45833333333334), (edge,(181793,175056),393.45), (edge,(181797,175063),3.833333333333333), (edge,(175064,179873),0.0), (edge,(175062,175056),721.2416666666667), (edge,(175063,179874),3.8333333333333335), (edge,(182570,175063),42.63333333333333), (edge,(175056,177364),96.53333333333333), (edge,(190114,167372),14.8), (edge,(182570,175064),43.733333333333334), (edge,(167373,190114),28.0), (edge,(175056,175064),192.05), (edge,(181794,175056),40.13333333333333), (edge,(148983,148982),152.0), (edge,(148979,148647),43.0), (edge,(167371,174884),2377857.4833333334), (edge,(31341,31336),8.85), (edge,(148979,148982),15.55), (edge,(167371,174885),1347382.9249999998), (edge,(182539,182541),3108.825), (edge,(181797,179873),0.0), (edge,(167371,174887),1275096.925), (edge,(182570,177364),42.63333333333333), (edge,(148979,169531),13.9), (edge,(181792,181797),0.0), (edge,(177365,182570),534.2166666666667), (edge,(181793,182570),35688.200000000004), (edge,(177365,175056),406.225), (edge,(182570,181792),42.63333333333333), (edge,(179873,181797),0.0), (edge,(175056,181794),15.533333333333333), (edge,(175056,179873),97.05833333333334), (edge,(179874,177364),0.0), (edge,(177364,177365),6.383333333333334), (edge,(175064,181793),3.4833333333333334), (edge,(175064,179874),0.0), (edge,(182570,181793),371.95), (edge,(31341,31337),8.85), (edge,(179873,182570),66204.2), (edge,(191479,191478),5994.991666666667), (edge,(181797,175064),3.833333333333333), (edge,(182570,177365),42.63333333333333), (edge,(175062,181792),3.8333333333333335), (edge,(179874,181793),0.0), (edge,(167374,189703),54566.941666666666), (edge,(148979,148983),105.2), (edge,(148647,148979),72.0), (edge,(181792,175062),6.833333333333333), (edge,(175064,175063),0.0), (edge,(174883,167371),20511.88333333333), (edge,(175062,182570),545.7), (edge,(167377,189703),5674324.25), (edge,(179874,175063),6.833333333333333), (edge,(31339,31341),12.05), (edge,(174887,167371),58392.683333333334), (edge,(177364,181797),3.8333333333333335), (edge,(175063,181797),6.833333333333333), (edge,(175056,181797),81.45833333333334), (edge,(179873,181793),6.133333333333334), (edge,(181797,175056),385.32500000000005), (edge,(148982,148979),113.1), (edge,(148979,148980),13.9), (edge,(175056,181793),81.275), (edge,(191131,191132),32.06666666666667), (edge,(182541,182540),112.64166666666667), (edge,(167372,167371),5425788.166666666), (edge,(181793,175062),2.783333333333333), (edge,(181792,175064),0.0), (edge,(175064,177364),7.866666666666666), (edge,(181797,177364),6.833333333333334), (edge,(191478,191479),3963.3), (edge,(174884,167371),108864.71666666666), (edge,(179873,175056),413.575), (edge,(182570,181797),42.63333333333333), (edge,(179873,175064),0.0), (edge,(181793,179874),0.0), (edge,(175063,175056),712.7416666666667), (edge,(167372,190114),28.0), (edge,(31337,31341),11.350000000000001), (edge,(175056,175063),191.375), (edge,(167374,167372),5430936.833333334), (edge,(189942,189941),3862.354166666666), (edge,(179874,182570),352.0333333333333), (edge,(148979,148981),13.9), (edge,(148980,148979),113.1), (edge,(177365,179874),0.0), (edge,(179874,175056),381.31666666666666), (edge,(174885,167371),60703.26666666666))))\n"
      },
      "dateCreated": "Mar 1, 2016 12:59:55 AM",
      "dateStarted": "Mar 9, 2016 4:51:33 PM",
      "dateFinished": "Mar 9, 2016 4:55:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndef cleanfile(filename):\n    ret_dict \u003d {}\n    with open(filename) as f:\n        graph_list \u003d []\n        for line in f:\n            ## get the key \n            t_key \u003d \"\"\n            for x in line:\n                if x \u003d\u003d \"(\":\n                    pass\n                elif x \u003d\u003d \",\":\n                    break\n                else:\n                    t_key +\u003d x\n            ## list of preprocessed vertices\n            list_vert \u003d str(line).split(\"Vetrex\")\n            ## list of preprocessed edges\n            list_edges \u003d str(list_vert[-1]).split(\"edge\")\n            ## update last element in vertices\n            list_vert[-1] \u003d list_edges[0]\n            list_vert \u003d list_vert[1:]\n            list_edges \u003d list_edges[1:]\n            ## dict of vertices and edges\n            vert_dict \u003d {}\n            edge_list \u003d []\n            for v in list_vert:\n                ed_v \u003d v\n                list_chs \u003d \" ()List\"\n                for x in list_chs:\n                    ed_v \u003d ed_v.replace(x,\"\")\n                if ed_v[0] \u003d\u003d \",\":\n                    ed_v \u003d ed_v[1:]\n                if ed_v[-1] \u003d\u003d \",\":\n                    ed_v \u003d ed_v[:-1]\n                ded_v \u003d ed_v.split(\",\")\n                vkey \u003d ded_v[0]\n                vval \u003d ded_v[1].split(\".\")\n                vert_dict[vkey] \u003d vval\n            for e in list_edges:\n                ed_e \u003d e\n                list_chs \u003d \" ()\\n\"\n                for x in list_chs:\n                    ed_e \u003d ed_e.replace(x,\"\")\n                if ed_e[0] \u003d\u003d \",\":\n                    ed_e \u003d ed_e[1:]\n                if ed_e[-1] \u003d\u003d \",\":\n                    ed_e \u003d ed_e[:-1]\n                eval \u003d ed_e.split(\",\")\n                edge_list.append(eval)\n                ret_tuple \u003d (t_key,[vert_dict,edge_list])\n            graph_list.append(ret_tuple)\n    return graph_list\n            \n                \n    #print(t_key)\n    #print(list_vert[0])\n    #print(list_vert[1])\n    #print(list_vert[-1])\n    #print(list_edges[0])\n    #print(list_edges[1])\n    #print(list_edges[-1])\n    #print(\"Step 1\")\n    #print(ed_v)\n    #print(ded_v)\n    #print(vkey)\n    #print(vval)\n    #print(\"Step 2\")\n    #print(ed_e)\n    #print(eval)\n    \ndef build_graph(g_dict):\n    # function to build graph, input is a list of vert_dict and list_edge\n    G\u003dnx.DiGraph()\n    for v in g_dict[0].keys():\n        G.add_node(v)\n    for e in g_dict[1]:\n        G.add_edge(e[0],e[1])\n    return G\n    \ndef process_graph(G):\n    return nx.degree_centrality(G)\n    \ndef show(p):\n    img \u003d StringIO.StringIO()\n    p.savefig(img, format\u003d\u0027svg\u0027)\n    img.seek(0)\n    print \"%html \u003cdiv style\u003d\u0027width:600px\u0027\u003e\" + img.buf + \"\u003c/div\u003e\"",
      "dateUpdated": "Mar 9, 2016 4:58:56 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794004268_888373564",
      "id": "20160301-010004_630648457",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:00:04 AM",
      "dateStarted": "Mar 9, 2016 4:58:56 PM",
      "dateFinished": "Mar 9, 2016 4:58:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfrom __future__ import print_function\nimport networkx as nx\nimport numpy\nfrom networkx import algorithms\nfrom networkx.algorithms import approximation as approx\n\nimport re\nfilename \u003d \"/home/ubuntu/collectedgraph0803.txt\"\n# list of (time, [vert_dict,edge_list])\ngraph_list \u003d cleanfile(filename)\n# Rdd of list( tupe(time, [v_dict, edge_list]) ) \ngraph_sc \u003d sc.parallelize(graph_list)\ngraph_sc_key \u003d graph_sc.sortByKey()\ngraph_build \u003d graph_sc_key.map(lambda s: (s[0],build_graph(s[1])))\ngraph_degree_connectivity \u003d graph_build.map(lambda s: (s[0],nx.node_connectivity(s[1])))\ngraph_degree_centrality \u003d graph_build.map(lambda s: (s[0],nx.degree_centrality(s[1])))\ngraph_degree_centrality_mean \u003d graph_degree_centrality.map(lambda s: sum(s[1].values())/len(s[1].values()))\ngraph_is_directed_acyclic_graph \u003d graph_build.map(lambda s: (s[0],nx.is_directed_acyclic_graph(s[1])))\ngraph_number_connected_components \u003d graph_build.map(lambda s: (s[0],nx.number_connected_components(s[1])))\ngraph_is_weakly_connected \u003d graph_build.map(lambda s: (s[0],nx.is_weakly_connected(s[1])))\ngraph_dag_longest_path_length \u003d graph_build.map(lambda s: (s[0],nx.dag_longest_path_length(s[1])))\ngraph_number_strongly_connected_components \u003d graph_build.map(lambda s: (s[0],nx.number_strongly_connected_components(s[1])))\ngraph_number_weakly_connected_components \u003d graph_build.map(lambda s: (s[0],nx.number_weakly_connected_components(s[1])))\n\nprint(graph_degree_radius.take(10))\n\n\n\n#graph_sc_built.foreach(print)",
      "dateUpdated": "Mar 9, 2016 7:10:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794022955_-625982783",
      "id": "20160301-010022_1469123699",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[(\u002712140485\u0027, False), (\u002712140486\u0027, False), (\u002712140487\u0027, False), (\u002712140488\u0027, False), (\u002712140489\u0027, False), (\u002712140490\u0027, False), (\u002712140491\u0027, False), (\u002712140492\u0027, False), (\u002712140493\u0027, False), (\u002712140494\u0027, False)]\n"
      },
      "dateCreated": "Mar 1, 2016 1:00:22 AM",
      "dateStarted": "Mar 9, 2016 7:10:01 PM",
      "dateFinished": "Mar 9, 2016 7:10:03 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport numpy\ngraph_strongly_connected_components_graph \u003d graph_build.map(lambda s: (s[0],[s[1].subgraph(x) for x in sorted(nx.strongly_connected_components(s[1]), key \u003d len, reverse\u003dTrue)][0:4] ))\ngraph_strongly_connected_components_graph_num \u003d graph_strongly_connected_components_graph.map(lambda s: (s[0],[(x,nx.number_of_nodes(x)) for x in s[1]] ))\nprint(graph_strongly_connected_components_graph.take(1))\nprint(graph_strongly_connected_components_graph_num.take(1))\ngraph_strongly_connected_components_graph_atrributes \u003d graph_strongly_connected_components_graph_num.map(lambda s: (s[0],[(x[0],nx.number_of_nodes(x[0]),nx.node_connectivity(x[0]),nx.degree_assortativity_coefficient(x[0]),nx.average_degree_connectivity(x[0]),nx.degree_centrality(x[0]), nx.closeness_centrality(x[0]), nx.betweenness_centrality(x[0]),   nx.load_centrality(x[0]),  nx.transitivity(x[0]),  nx.number_attracting_components(x[0]),  ) for x in s[1]] ))\nprint(graph_strongly_connected_components_graph_atrributes.take(1))\ngraph_strongly_connected_components_graph_atrributes_DF \u003d graph_strongly_connected_components_graph_atrributes.map(lambda s: Row(no_nodes\u003ds[1][0][1],conn\u003ds[1][0][2],assort\u003ds[1][0][3].item(),avg_conn\u003dfloat(numpy.mean(s[1][0][4].values())),deg_centr\u003dfloat(numpy.mean(s[1][0][5].values())),clos_centr\u003dfloat(numpy.mean(s[1][0][6].values())),bet_cent\u003dfloat(numpy.mean(s[1][0][7].values())),load_centr\u003dfloat(numpy.mean(s[1][0][8].values())),trans\u003ds[1][0][9].item(),no_att\u003dfloat(s[1][0][10]) )  ).toDF()\n\n\n# Register to use in SQL\ngraph_strongly_connected_components_graph_atrributes_DF.registerTempTable(\u0027graph_strongly_connected_components_graph_atrributes_DF\u0027)",
      "dateUpdated": "Mar 9, 2016 10:34:53 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457544975332_-1048165531",
      "id": "20160309-173615_1208124175",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[(\u002712144961\u0027, [\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84cef3ae50\u003e, \u003cnetworkx.classes.digraph.DiGraph object at 0x7f84cef3a690\u003e, \u003cnetworkx.classes.digraph.DiGraph object at 0x7f84cef3aad0\u003e, \u003cnetworkx.classes.digraph.DiGraph object at 0x7f84cef3a890\u003e])]\n[(\u002712144961\u0027, [(\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d10526d0\u003e, 13), (\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d1052fd0\u003e, 11), (\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d1052050\u003e, 7), (\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d1052c50\u003e, 4)])]\n[(\u002712144961\u0027, [(\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d1052ed0\u003e, 13, 1, -0.22451642889108975, {2: 12.0, 17: 9.352941176470589, 20: 10.475, 21: 10.380952380952381, 22: 10.090909090909092, 24: 9.25}, {\u0027175063\u0027: 1.75, \u0027175062\u0027: 1.4166666666666665, \u0027177364\u0027: 1.4166666666666665, \u0027177365\u0027: 1.6666666666666665, \u0027175064\u0027: 1.6666666666666665, \u0027182570\u0027: 1.8333333333333333, \u0027181792\u0027: 1.6666666666666665, \u0027181793\u0027: 1.75, \u0027179873\u0027: 1.75, \u0027179874\u0027: 1.6666666666666665, \u0027181797\u0027: 1.75, \u0027181794\u0027: 0.16666666666666666, \u0027175056\u0027: 2.0}, {\u0027175063\u0027: 0.9230769230769231, \u0027175062\u0027: 0.75, \u0027177364\u0027: 0.7058823529411765, \u0027177365\u0027: 0.9230769230769231, \u0027175064\u0027: 0.8571428571428571, \u0027182570\u0027: 0.9230769230769231, \u0027181792\u0027: 0.8, \u0027181793\u0027: 0.9230769230769231, \u0027179873\u0027: 0.8571428571428571, \u0027179874\u0027: 0.9230769230769231, \u0027181797\u0027: 0.9230769230769231, \u0027181794\u0027: 0.5217391304347826, \u0027175056\u0027: 1.0}, {\u0027175063\u0027: 0.009394540644540645, \u0027175062\u0027: 0.0026304713804713806, \u0027177364\u0027: 0.0008417508417508417, \u0027177365\u0027: 0.005471380471380472, \u0027175064\u0027: 0.006237974987974988, \u0027182570\u0027: 0.011183261183261184, \u0027181792\u0027: 0.008131914381914383, \u0027181793\u0027: 0.006313131313131313, \u0027179873\u0027: 0.009078884078884079, \u0027179874\u0027: 0.004524410774410775, \u0027181797\u0027: 0.008342352092352094, \u0027181794\u0027: 0.0, \u0027175056\u0027: 0.17784992784992784}, {\u0027175063\u0027: 0.009394540644540646, \u0027175062\u0027: 0.0026304713804713815, \u0027177364\u0027: 0.0008417508417508421, \u0027177365\u0027: 0.0054713804713804725, \u0027175064\u0027: 0.0062379749879749894, \u0027182570\u0027: 0.011183261183261186, \u0027181792\u0027: 0.008131914381914384, \u0027181793\u0027: 0.006313131313131315, \u0027179873\u0027: 0.00907888407888408, \u0027179874\u0027: 0.0045244107744107755, \u0027181797\u0027: 0.008342352092352096, \u0027181794\u0027: 0.0, \u0027175056\u0027: 0.17784992784992784}, 0.8957968476357268, 1), (\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d10aeb90\u003e, 11, 1, -0.51555555555555543, {12: 1.6666666666666667, 2: 4.833333333333333, 4: 2.0, 6: 3.5}, {\u0027167374\u0027: 0.4, \u0027167377\u0027: 0.2, \u0027167371\u0027: 1.2000000000000002, \u0027167372\u0027: 0.6000000000000001, \u0027167373\u0027: 0.2, \u0027174887\u0027: 0.2, \u0027174884\u0027: 0.2, \u0027174885\u0027: 0.2, \u0027174883\u0027: 0.2, \u0027190114\u0027: 0.6000000000000001, \u0027189703\u0027: 0.4}, {\u0027167374\u0027: 0.43478260869565216, \u0027167377\u0027: 0.2564102564102564, \u0027167371\u0027: 0.5882352941176471, \u0027167372\u0027: 0.5555555555555556, \u0027167373\u0027: 0.3448275862068966, \u0027174887\u0027: 0.38461538461538464, \u0027174884\u0027: 0.38461538461538464, \u0027174885\u0027: 0.38461538461538464, \u0027174883\u0027: 0.38461538461538464, \u0027190114\u0027: 0.5, \u0027189703\u0027: 0.3333333333333333}, {\u0027167374\u0027: 0.35555555555555557, \u0027167377\u0027: 0.0, \u0027167371\u0027: 0.6666666666666667, \u0027167372\u0027: 0.4666666666666667, \u0027167373\u0027: 0.0, \u0027174887\u0027: 0.0, \u0027174884\u0027: 0.0, \u0027174885\u0027: 0.0, \u0027174883\u0027: 0.0, \u0027190114\u0027: 0.2, \u0027189703\u0027: 0.2}, {\u0027167374\u0027: 0.35555555555555557, \u0027167377\u0027: 0.0, \u0027167371\u0027: 0.6666666666666667, \u0027167372\u0027: 0.4666666666666667, \u0027167373\u0027: 0.0, \u0027174887\u0027: 0.0, \u0027174884\u0027: 0.0, \u0027174885\u0027: 0.0, \u0027174883\u0027: 0.0, \u0027190114\u0027: 0.2, \u0027189703\u0027: 0.2}, 0.13043478260869565, 1), (\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d10ae0d0\u003e, 7, 1, -0.84800000000000009, {12: 1.3333333333333333, 2: 6.0, 4: 4.0}, {\u0027148647\u0027: 0.3333333333333333, \u0027148980\u0027: 0.3333333333333333, \u0027148981\u0027: 0.3333333333333333, \u0027148982\u0027: 0.6666666666666666, \u0027148983\u0027: 0.6666666666666666, \u0027169531\u0027: 0.3333333333333333, \u0027148979\u0027: 2.0}, {\u0027148647\u0027: 0.5454545454545454, \u0027148980\u0027: 0.5454545454545454, \u0027148981\u0027: 0.5454545454545454, \u0027148982\u0027: 0.6, \u0027148983\u0027: 0.6, \u0027169531\u0027: 0.5454545454545454, \u0027148979\u0027: 1.0}, {\u0027148647\u0027: 0.0, \u0027148980\u0027: 0.0, \u0027148981\u0027: 0.0, \u0027148982\u0027: 0.0, \u0027148983\u0027: 0.0, \u0027169531\u0027: 0.0, \u0027148979\u0027: 0.9333333333333333}, {\u0027148647\u0027: 0.0, \u0027148980\u0027: 0.0, \u0027148981\u0027: 0.0, \u0027148982\u0027: 0.0, \u0027148983\u0027: 0.0, \u0027169531\u0027: 0.0, \u0027148979\u0027: 0.9333333333333333}, 0.17647058823529413, 1), (\u003cnetworkx.classes.digraph.DiGraph object at 0x7f84d5a71750\u003e, 4, 1, -1.0, {2: 3.0, 6: 1.0}, {\u002731339\u0027: 0.6666666666666666, \u002731341\u0027: 2.0, \u002731337\u0027: 0.6666666666666666, \u002731336\u0027: 0.6666666666666666}, {\u002731339\u0027: 0.6, \u002731341\u0027: 1.0, \u002731337\u0027: 0.6, \u002731336\u0027: 0.6}, {\u002731339\u0027: 0.0, \u002731341\u0027: 1.0, \u002731337\u0027: 0.0, \u002731336\u0027: 0.0}, {\u002731339\u0027: 0.0, \u002731341\u0027: 1.0, \u002731337\u0027: 0.0, \u002731336\u0027: 0.0}, 0.0, 1)])]\n"
      },
      "dateCreated": "Mar 9, 2016 5:36:15 PM",
      "dateStarted": "Mar 9, 2016 10:31:24 PM",
      "dateFinished": "Mar 9, 2016 10:31:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect trans, count(1) value\nfrom graph_strongly_connected_components_graph_atrributes_DF\ngroup by trans \norder by trans",
      "dateUpdated": "Mar 9, 2016 10:34:27 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "no_att",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457561305222_-500103994",
      "id": "20160309-220825_1851731426",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "trans\tvalue\n0.5125628140703518\t2\n0.5129533678756477\t1\n0.5167464114832536\t1\n0.5217391304347826\t2\n0.5230769230769231\t1\n0.5242718446601942\t1\n0.525\t1\n0.5276381909547738\t1\n0.5285714285714286\t1\n0.5294117647058824\t2\n0.5302325581395348\t1\n0.5315533980582524\t1\n0.5320197044334976\t2\n0.5336538461538461\t1\n0.5341463414634147\t1\n0.5352112676056338\t1\n0.5357142857142857\t1\n0.5362318840579711\t2\n0.5366379310344828\t1\n0.536697247706422\t4\n0.5373134328358209\t3\n0.5388349514563107\t1\n0.5391705069124424\t3\n0.5394736842105263\t1\n0.5397196261682243\t1\n0.54\t1\n0.5402843601895735\t3\n0.5405405405405406\t2\n0.5414634146341464\t2\n0.5416666666666666\t3\n0.5422535211267606\t1\n0.5424107142857143\t1\n0.5428571428571428\t4\n0.5435779816513762\t1\n0.5441176470588235\t1\n0.5441860465116279\t3\n0.5442477876106194\t1\n0.5448113207547169\t1\n0.5454545454545454\t6\n0.5466666666666666\t3\n0.5472972972972973\t1\n0.54739336492891\t1\n0.547945205479452\t3\n0.5480769230769231\t2\n0.5486111111111112\t1\n0.5487804878048781\t1\n0.548936170212766\t3\n0.5491071428571429\t2\n0.5492957746478874\t1\n0.5502183406113537\t1\n0.5504587155963303\t12\n0.5507246376811594\t4\n0.5514705882352942\t1\n0.5515695067264574\t2\n0.5518867924528302\t1\n0.551948051948052\t1\n0.5522727272727272\t2\n0.5526315789473685\t4\n0.5529953917050692\t5\n0.5534883720930233\t1\n0.5540540540540541\t4\n0.5543478260869565\t1\n0.5545023696682464\t3\n0.5546218487394958\t1\n0.5547945205479452\t1\n0.5550660792951542\t8\n0.5555555555555556\t4\n0.5558035714285714\t2\n0.5560344827586207\t2\n0.5563380281690141\t1\n0.5565610859728507\t4\n0.5571428571428572\t3\n0.5575221238938053\t5\n0.5582959641255605\t2\n0.5584415584415584\t1\n0.5585774058577406\t2\n0.5589622641509434\t1\n0.5590909090909091\t5\n0.5592105263157895\t1\n0.559322033898305\t1\n0.5594713656387665\t1\n0.5598086124401914\t1\n0.56\t3\n0.5600858369098712\t1\n0.5607476635514018\t1\n0.5608108108108109\t1\n0.5608695652173913\t2\n0.5616438356164384\t1\n0.5617021276595745\t2\n0.5625\t4\n0.5633187772925764\t5\n0.5633484162895928\t2\n0.5640495867768595\t1\n0.5641025641025641\t1\n0.5642201834862385\t3\n0.5648535564853556\t1\n0.564935064935065\t3\n0.5650224215246636\t1\n0.5657894736842105\t8\n0.5659090909090909\t1\n0.5663900414937759\t1\n0.5665236051502146\t4\n0.5666666666666667\t2\n0.5668202764976958\t10\n0.5672268907563025\t2\n0.5675675675675675\t5\n0.5677570093457944\t2\n0.5682819383259912\t3\n0.56875\t1\n0.5689655172413793\t2\n0.5691964285714286\t3\n0.569327731092437\t1\n0.5693877551020409\t1\n0.569620253164557\t3\n0.5698689956331878\t3\n0.5701357466063348\t1\n0.5702479338842975\t1\n0.5704225352112676\t1\n0.5707964601769911\t9\n0.5708502024291497\t2\n0.5714285714285714\t1\n0.5717213114754098\t2\n0.5720338983050848\t3\n0.5720930232558139\t2\n0.5726141078838174\t3\n0.5727272727272728\t3\n0.572961373390558\t2\n0.5731132075471698\t1\n0.573170731707317\t1\n0.5733333333333334\t6\n0.5735294117647058\t1\n0.5739130434782609\t1\n0.5741626794258373\t1\n0.5743243243243243\t1\n0.574468085106383\t4\n0.5747663551401869\t1\n0.5748898678414097\t1\n0.575\t1\n0.5753424657534246\t1\n0.5754310344827587\t1\n0.5755555555555556\t1\n0.5758293838862559\t1\n0.5758928571428571\t3\n0.5764192139737991\t7\n0.5769230769230769\t7\n0.5774058577405857\t2\n0.577922077922078\t1\n0.5779816513761468\t2\n0.5783898305084746\t4\n0.57847533632287\t2\n0.578838174273859\t1\n0.5789473684210527\t7\n0.5793991416309013\t3\n0.5798319327731093\t8\n0.58\t1\n0.5802469135802469\t2\n0.5806451612903226\t2\n0.58125\t2\n0.5814977973568282\t5\n0.5816326530612245\t2\n0.5818965517241379\t6\n0.5822784810126582\t6\n0.5825892857142857\t1\n0.582995951417004\t5\n0.5836820083682008\t1\n0.583710407239819\t1\n0.5840163934426229\t2\n0.584070796460177\t3\n0.5844155844155844\t3\n0.5847457627118644\t10\n0.5850622406639004\t2\n0.5853658536585366\t2\n0.5858369098712446\t3\n0.5861344537815126\t1\n0.5864197530864198\t1\n0.5866666666666667\t3\n0.5869565217391305\t5\n0.5872340425531914\t4\n0.5873983739837398\t1\n0.5875\t3\n0.5877551020408164\t1\n0.588\t2\n0.5883534136546185\t1\n0.5883620689655172\t1\n0.5888429752066116\t3\n0.5889328063241107\t1\n0.5892857142857143\t1\n0.5895196506550219\t3\n0.5897435897435898\t6\n0.5899581589958159\t6\n0.5901639344262295\t1\n0.5909090909090909\t1\n0.5911016949152542\t1\n0.5916334661354582\t1\n0.591743119266055\t1\n0.5921052631578947\t4\n0.592274678111588\t1\n0.592436974789916\t6\n0.5925925925925926\t2\n0.592741935483871\t1\n0.5934782608695652\t1\n0.59375\t1\n0.5938775510204082\t1\n0.5947136563876652\t2\n0.5949367088607594\t4\n0.5950413223140496\t6\n0.5951417004048583\t1\n0.5952380952380952\t1\n0.5953307392996109\t1\n0.5955284552845529\t1\n0.5961538461538461\t1\n0.5962343096234309\t1\n0.5963114754098361\t3\n0.5963855421686747\t2\n0.5972222222222222\t1\n0.5974025974025974\t2\n0.597457627118644\t5\n0.5975103734439834\t2\n0.5975609756097561\t3\n0.5976095617529881\t1\n0.5986238532110092\t1\n0.5995850622406639\t1\n0.599609375\t1\n0.6\t11\n0.6008403361344538\t1\n0.6012931034482759\t1\n0.6024096385542169\t2\n0.6024590163934426\t2\n0.6027397260273972\t1\n0.6036585365853658\t1\n0.6038961038961039\t1\n0.6050420168067226\t3\n0.6051502145922747\t5\n0.6071428571428571\t1\n0.6072874493927125\t2\n0.6075949367088608\t3\n0.6082677165354331\t1\n0.6082949308755761\t1\n0.6086065573770492\t1\n0.6088560885608856\t1\n0.6091703056768559\t1\n0.6097560975609756\t1\n0.6099585062240664\t1\n0.6104417670682731\t1\n0.6106719367588933\t1\n0.611764705882353\t2\n0.6118421052631579\t1\n0.612\t1\n0.6121076233183856\t1\n0.6122448979591837\t2\n0.6126482213438735\t1\n0.6127659574468085\t1\n0.6136363636363636\t1\n0.6149425287356322\t1\n0.6150627615062761\t1\n0.6173285198555957\t1\n0.6186770428015564\t1\n0.6194331983805668\t2\n0.6215139442231076\t1\n0.6219512195121951\t3\n0.6222222222222222\t1\n0.6241610738255033\t1\n0.628158844765343\t1\n0.6285211267605634\t1\n0.6306122448979592\t1\n0.631578947368421\t2\n0.6318897637795275\t1\n0.6319148936170212\t1\n0.6332179930795848\t1\n0.6342281879194631\t1\n0.6343283582089553\t1\n0.636\t1\n0.6365313653136532\t1\n0.6366906474820144\t1\n0.6371681415929203\t1\n0.6376306620209059\t1\n0.6385135135135135\t1\n0.6386138613861386\t1\n0.6398601398601399\t1\n0.6405693950177936\t1\n0.6421404682274248\t1\n0.6428571428571429\t1\n0.6451612903225806\t1\n0.6458333333333334\t1\n0.6459074733096085\t1\n0.6459854014598541\t1\n0.6496478873239436\t1\n0.6496815286624203\t1\n0.6503164556962026\t1\n0.6512455516014235\t1\n0.6517241379310345\t2\n0.6530612244897959\t1\n0.6538461538461539\t1\n0.6559485530546624\t1\n0.65625\t1\n0.658273381294964\t1\n0.66\t1\n0.6611842105263158\t1\n0.6614906832298136\t1\n0.6633663366336634\t1\n0.6634615384615384\t1\n0.6644295302013423\t1\n0.6666666666666666\t1\n0.6687306501547987\t1\n0.6710526315789473\t1\n0.6728971962616822\t1\n0.6732673267326733\t1\n0.6735668789808917\t1\n0.6738461538461539\t1\n0.6742671009771987\t1\n0.6758241758241759\t1\n0.6761904761904762\t2\n0.6792452830188679\t1\n0.6797583081570997\t1\n0.6805111821086262\t1\n0.6805970149253732\t1\n0.6813725490196079\t1\n0.682258064516129\t1\n0.6829971181556196\t1\n0.683076923076923\t1\n0.6835443037974683\t1\n0.6865203761755486\t1\n0.6876790830945558\t1\n0.6878980891719745\t1\n0.6884984025559105\t1\n0.6894409937888198\t1\n0.6901840490797546\t1\n0.6926751592356688\t1\n0.6930091185410334\t2\n0.6942857142857143\t1\n0.696078431372549\t1\n0.6961325966850829\t1\n0.6970588235294117\t1\n0.6981132075471698\t1\n0.6985074626865672\t1\n0.7005988023952096\t1\n0.7016806722689075\t1\n0.7095808383233533\t1\n0.7107438016528925\t2\n0.7126099706744868\t1\n0.7138810198300283\t1\n0.717741935483871\t1\n0.7188365650969529\t1\n0.7267605633802817\t1\n0.7273972602739726\t1\n0.728\t1\n0.7281167108753316\t1\n0.7292817679558011\t1\n0.734375\t1\n0.7380952380952381\t1\n0.7401574803149606\t1\n0.7420212765957447\t1\n0.7425373134328358\t1\n0.7722772277227723\t1\n0.7945205479452054\t1\n0.7990654205607477\t1\n0.8957968476357268\t1\n"
      },
      "dateCreated": "Mar 9, 2016 10:08:25 PM",
      "dateStarted": "Mar 9, 2016 10:34:28 PM",
      "dateFinished": "Mar 9, 2016 10:34:33 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ngraph_strongly_connected_components \u003d graph_build.map(lambda s: (s[0],list(nx.strongly_connected_components(s[1])) ))\nprint(graph_strongly_connected_components.take(3))\nmean_cent_list \u003d []\nmax_cent_list \u003d []\nc_size_list \u003d []\nmixed_list \u003d []\nmean_cent_list_big \u003d []\nmax_cent_list_big \u003d []\nc_size_list_big \u003d []\nmixed_list_big \u003d []\nfor c in graph_strongly_connected_components.take(1)[0][1]:\n    mean_cent \u003d 0\n    max_cent \u003d []\n    for v in list(c):\n        mean_cent +\u003d graph_degree_centrality.take(1)[0][1][v]\n        max_cent.append(graph_degree_centrality.take(1)[0][1][v])\n    mean_cent_list.append(mean_cent/len(c))\n    max_cent_list.append(max(max_cent))\n    c_size_list.append(len(c))\n    mixed_list.append((len(c),max(max_cent)))\n    if len(c) \u003e\u003d 4:\n        mean_cent \u003d 0\n        max_cent \u003d []\n        for v in list(c):\n            mean_cent +\u003d graph_degree_centrality.take(1)[0][1][v]\n            max_cent.append(graph_degree_centrality.take(1)[0][1][v])\n        mean_cent_list_big.append(mean_cent/len(c))\n        max_cent_list_big.append(max(max_cent))\n        c_size_list_big.append(len(c))\n        mixed_list_big.append((len(c),max(max_cent)))\n    \nprint(mean_cent_list)\nprint(max_cent_list)\nprint(c_size_list)\nprint(\"separate\")\nprint(mean_cent_list_big)\nprint(max_cent_list_big)\nprint(c_size_list_big)\nprint([max_cent_list_big[i]/mean_cent_list_big[i] for i in range(len(mean_cent_list_big))])\nmixed_list_RDD \u003d sc.parallelize(mixed_list)\nmixed_list_RDD \u003d mixed_list_RDD.map(lambda p: Row(Size\u003dp[0], Centrality\u003dp[1]))\n",
      "dateUpdated": "Mar 9, 2016 6:53:58 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457134190785_1953139476",
      "id": "20160304-232950_367692594",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[(\u002712144961\u0027, [set([\u0027191132\u0027, \u0027191131\u0027]), set([\u0027167374\u0027, \u0027167377\u0027, \u0027167371\u0027, \u0027167372\u0027, \u0027167373\u0027, \u0027174887\u0027, \u0027174884\u0027, \u0027174885\u0027, \u0027174883\u0027, \u0027190114\u0027, \u0027189703\u0027]), set([\u0027175063\u0027, \u0027175062\u0027, \u0027177364\u0027, \u0027177365\u0027, \u0027175064\u0027, \u0027182570\u0027, \u0027181792\u0027, \u0027181793\u0027, \u0027179873\u0027, \u0027179874\u0027, \u0027181797\u0027, \u0027181794\u0027, \u0027175056\u0027]), set([\u0027148647\u0027, \u0027148980\u0027, \u0027148981\u0027, \u0027148982\u0027, \u0027148983\u0027, \u0027169531\u0027, \u0027148979\u0027]), set([\u0027182539\u0027, \u0027182540\u0027, \u0027182541\u0027]), set([\u0027189942\u0027, \u0027189941\u0027]), set([\u0027191478\u0027, \u0027191479\u0027]), set([\u002731339\u0027, \u002731341\u0027, \u002731337\u0027, \u002731336\u0027]), set([\u0027191049\u0027, \u0027191048\u0027])]), (\u002712144962\u0027, [set([\u0027191132\u0027, \u0027191131\u0027]), set([\u0027167374\u0027, \u0027167377\u0027, \u0027167371\u0027, \u0027167372\u0027, \u0027167373\u0027, \u0027174887\u0027, \u0027174884\u0027, \u0027174885\u0027, \u0027174883\u0027, \u0027190114\u0027, \u0027189703\u0027]), set([\u002731339\u0027, \u002731341\u0027, \u002731337\u0027, \u002731336\u0027]), set([\u0027148647\u0027, \u0027148980\u0027, \u0027148981\u0027, \u0027148982\u0027, \u0027148983\u0027, \u0027169531\u0027, \u0027148979\u0027]), set([\u0027175063\u0027, \u0027175062\u0027, \u0027177364\u0027, \u0027177365\u0027, \u0027175064\u0027, \u0027182570\u0027, \u0027181792\u0027, \u0027181793\u0027, \u0027179873\u0027, \u0027179874\u0027, \u0027181797\u0027, \u0027181794\u0027, \u0027175056\u0027]), set([\u0027182539\u0027, \u0027182540\u0027, \u0027182541\u0027]), set([\u0027189942\u0027, \u0027189941\u0027]), set([\u0027191478\u0027, \u0027191479\u0027]), set([\u0027191049\u0027, \u0027191048\u0027])]), (\u002712144963\u0027, [set([\u0027191132\u0027, \u0027191131\u0027]), set([\u0027167374\u0027, \u0027167377\u0027, \u0027167371\u0027, \u0027167372\u0027, \u0027167373\u0027, \u0027174887\u0027, \u0027174884\u0027, \u0027174885\u0027, \u0027174883\u0027, \u0027190114\u0027, \u0027189703\u0027]), set([\u0027148647\u0027, \u0027148980\u0027, \u0027148981\u0027, \u0027148982\u0027, \u0027148983\u0027, \u0027169531\u0027, \u0027148979\u0027]), set([\u0027175063\u0027, \u0027175062\u0027, \u0027177364\u0027, \u0027177365\u0027, \u0027175064\u0027, \u0027182570\u0027, \u0027181792\u0027, \u0027181793\u0027, \u0027179873\u0027, \u0027179874\u0027, \u0027181797\u0027, \u0027181794\u0027, \u0027175056\u0027]), set([\u0027182539\u0027, \u0027182540\u0027, \u0027182541\u0027]), set([\u0027189942\u0027, \u0027189941\u0027]), set([\u002731339\u0027, \u002731341\u0027, \u002731337\u0027, \u002731336\u0027]), set([\u0027191478\u0027, \u0027191479\u0027]), set([\u0027191049\u0027, \u0027191048\u0027])])]\n[0.044444444444444446, 0.08888888888888886, 0.4205128205128205, 0.08888888888888889, 0.08888888888888889, 0.044444444444444446, 0.044444444444444446, 0.06666666666666667, 0.044444444444444446]\n[0.044444444444444446, 0.26666666666666666, 0.5333333333333333, 0.26666666666666666, 0.08888888888888889, 0.044444444444444446, 0.044444444444444446, 0.13333333333333333, 0.044444444444444446]\n[2, 11, 13, 7, 3, 2, 2, 4, 2]\nseparate\n[0.08888888888888886, 0.4205128205128205, 0.08888888888888889, 0.06666666666666667]\n[0.26666666666666666, 0.5333333333333333, 0.26666666666666666, 0.13333333333333333]\n[11, 13, 7, 4]\n[3.000000000000001, 1.2682926829268293, 3.0, 2.0]\n"
      },
      "dateCreated": "Mar 4, 2016 11:29:50 PM",
      "dateStarted": "Mar 9, 2016 5:35:16 PM",
      "dateFinished": "Mar 9, 2016 5:35:33 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nprint(graph_sc.count())\nprint(graph_degree_connectivity.take(10))\nprint(graph_degree_centrality.take(10))\nprint(graph_degree_centrality_mean.take(10))\nprint(graph_is_directed_acyclic_graph.take(10))\nprint(graph_is_weakly_connected.take(10))\n\n\nprint(graph_number_strongly_connected_components.take(10))\nprint(graph_number_weakly_connected_components.take(10))",
      "dateUpdated": "Mar 4, 2016 11:11:24 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457130771069_-1522212495",
      "id": "20160304-223251_1266850188",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "364\n[(\u002712140485\u0027, 0), (\u002712140486\u0027, 0), (\u002712140487\u0027, 0), (\u002712140488\u0027, 0), (\u002712140489\u0027, 0), (\u002712140490\u0027, 0), (\u002712140491\u0027, 0), (\u002712140492\u0027, 0), (\u002712140493\u0027, 0), (\u002712140494\u0027, 0)]\n[(\u002712140485\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u002731341\u0027: 0.1276595744680851, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2553191489361702, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2127659574468085, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2978723404255319, \u0027175062\u0027: 0.2553191489361702, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2978723404255319, \u0027174885\u0027: 0.0425531914893617, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2553191489361702, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.1276595744680851, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027182541\u0027: 0.0851063829787234, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140486\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2553191489361702, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2553191489361702, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2553191489361702, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u002731341\u0027: 0.1276595744680851, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2978723404255319, \u0027177365\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2553191489361702, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027182541\u0027: 0.0851063829787234, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140487\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2553191489361702, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2978723404255319, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2553191489361702, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2553191489361702, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2553191489361702, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.1276595744680851, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027167373\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140488\u0027, {\u0027148981\u0027: 0.2127659574468085, \u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.46808510638297873, \u0027181793\u0027: 0.46808510638297873, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.46808510638297873, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.46808510638297873, \u0027175062\u0027: 0.46808510638297873, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.46808510638297873, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.46808510638297873, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.46808510638297873, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.46808510638297873, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027182541\u0027: 0.0851063829787234, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140489\u0027, {\u0027191131\u0027: 0.043478260869565216, \u0027191134\u0027: 0.021739130434782608, \u0027174887\u0027: 0.043478260869565216, \u0027174884\u0027: 0.021739130434782608, \u0027174885\u0027: 0.021739130434782608, \u0027174883\u0027: 0.021739130434782608, \u0027181792\u0027: 0.45652173913043476, \u0027181793\u0027: 0.45652173913043476, \u0027148982\u0027: 0.17391304347826086, \u0027148983\u0027: 0.21739130434782608, \u0027181797\u0027: 0.45652173913043476, \u0027181794\u0027: 0.043478260869565216, \u0027182539\u0027: 0.08695652173913043, \u0027175063\u0027: 0.45652173913043476, \u0027175062\u0027: 0.45652173913043476, \u0027189941\u0027: 0.043478260869565216, \u0027148647\u0027: 0.08695652173913043, \u0027182540\u0027: 0.08695652173913043, \u0027175064\u0027: 0.2391304347826087, \u0027182570\u0027: 0.45652173913043476, \u0027167373\u0027: 0.043478260869565216, \u0027169531\u0027: 0.17391304347826086, \u0027148979\u0027: 0.2608695652173913, \u002731339\u0027: 0.043478260869565216, \u0027177364\u0027: 0.45652173913043476, \u002731341\u0027: 0.13043478260869565, \u002731337\u0027: 0.043478260869565216, \u002731336\u0027: 0.043478260869565216, \u0027189942\u0027: 0.043478260869565216, \u0027191558\u0027: 0.021739130434782608, \u0027191478\u0027: 0.043478260869565216, \u0027191479\u0027: 0.043478260869565216, \u0027190114\u0027: 0.13043478260869565, \u0027179873\u0027: 0.45652173913043476, \u0027179874\u0027: 0.45652173913043476, \u0027191049\u0027: 0.043478260869565216, \u0027191048\u0027: 0.043478260869565216, \u0027167374\u0027: 0.08695652173913043, \u0027148980\u0027: 0.2608695652173913, \u0027177365\u0027: 0.45652173913043476, \u0027167377\u0027: 0.043478260869565216, \u0027167371\u0027: 0.19565217391304346, \u0027167372\u0027: 0.13043478260869565, \u0027148981\u0027: 0.21739130434782608, \u0027182541\u0027: 0.08695652173913043, \u0027189703\u0027: 0.08695652173913043, \u0027175056\u0027: 0.5}), (\u002712140490\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027148980\u0027: 0.2553191489361702, \u0027181793\u0027: 0.46808510638297873, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.46808510638297873, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.46808510638297873, \u0027189942\u0027: 0.0425531914893617, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.46808510638297873, \u0027182570\u0027: 0.46808510638297873, \u0027167373\u0027: 0.0425531914893617, \u0027169531\u0027: 0.1702127659574468, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.46808510638297873, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027175062\u0027: 0.46808510638297873, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.46808510638297873, \u0027179874\u0027: 0.46808510638297873, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027181792\u0027: 0.46808510638297873, \u0027177365\u0027: 0.46808510638297873, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027148981\u0027: 0.2127659574468085, \u0027182541\u0027: 0.0851063829787234, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140491\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.2127659574468085, \u0027181793\u0027: 0.3829787234042553, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.2127659574468085, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.3829787234042553, \u0027175062\u0027: 0.23404255319148937, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2765957446808511, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.23404255319148937, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.3191489361702128, \u0027179874\u0027: 0.2978723404255319, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.1276595744680851, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027148981\u0027: 0.2127659574468085, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140492\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027181792\u0027: 0.1702127659574468, \u0027181793\u0027: 0.2127659574468085, \u0027148982\u0027: 0.1702127659574468, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.1276595744680851, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2127659574468085, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027182540\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2978723404255319, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.1702127659574468, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2127659574468085, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.2978723404255319, \u0027179874\u0027: 0.2553191489361702, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027167374\u0027: 0.0851063829787234, \u0027148980\u0027: 0.2553191489361702, \u0027177365\u0027: 0.0851063829787234, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027167372\u0027: 0.1276595744680851, \u0027148981\u0027: 0.2127659574468085, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140493\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u002731341\u0027: 0.1276595744680851, \u0027174883\u0027: 0.0425531914893617, \u0027148980\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2127659574468085, \u0027148982\u0027: 0.2127659574468085, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.1276595744680851, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2553191489361702, \u0027175062\u0027: 0.2127659574468085, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2553191489361702, \u0027182570\u0027: 0.46808510638297873, \u0027169531\u0027: 0.2127659574468085, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u002731339\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2127659574468085, \u0027174885\u0027: 0.0425531914893617, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u0027191478\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.3404255319148936, \u0027179874\u0027: 0.2553191489361702, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027182541\u0027: 0.0851063829787234, \u0027167374\u0027: 0.0851063829787234, \u0027181792\u0027: 0.1702127659574468, \u0027177365\u0027: 0.0851063829787234, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027148981\u0027: 0.2127659574468085, \u0027167373\u0027: 0.0425531914893617, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404}), (\u002712140494\u0027, {\u0027191132\u0027: 0.0425531914893617, \u0027191131\u0027: 0.1276595744680851, \u0027191134\u0027: 0.0425531914893617, \u0027174887\u0027: 0.0425531914893617, \u0027174884\u0027: 0.0425531914893617, \u0027174885\u0027: 0.0425531914893617, \u0027174883\u0027: 0.0425531914893617, \u0027148980\u0027: 0.2553191489361702, \u0027181793\u0027: 0.2127659574468085, \u0027148982\u0027: 0.2127659574468085, \u0027148983\u0027: 0.2127659574468085, \u0027181797\u0027: 0.1276595744680851, \u0027181794\u0027: 0.0425531914893617, \u0027182539\u0027: 0.0851063829787234, \u0027175063\u0027: 0.2765957446808511, \u0027175062\u0027: 0.2127659574468085, \u0027189941\u0027: 0.0425531914893617, \u0027148647\u0027: 0.0851063829787234, \u0027175064\u0027: 0.2765957446808511, \u0027182570\u0027: 0.46808510638297873, \u0027167373\u0027: 0.0425531914893617, \u0027169531\u0027: 0.2127659574468085, \u0027167372\u0027: 0.1276595744680851, \u0027148979\u0027: 0.2553191489361702, \u0027191478\u0027: 0.0425531914893617, \u0027177364\u0027: 0.2127659574468085, \u002731341\u0027: 0.1276595744680851, \u002731337\u0027: 0.0425531914893617, \u002731336\u0027: 0.0425531914893617, \u0027189942\u0027: 0.0425531914893617, \u0027191558\u0027: 0.0425531914893617, \u002731339\u0027: 0.0425531914893617, \u0027191479\u0027: 0.0425531914893617, \u0027190114\u0027: 0.1276595744680851, \u0027179873\u0027: 0.3404255319148936, \u0027179874\u0027: 0.2978723404255319, \u0027191049\u0027: 0.0425531914893617, \u0027191048\u0027: 0.0425531914893617, \u0027167374\u0027: 0.0851063829787234, \u0027181792\u0027: 0.2127659574468085, \u0027177365\u0027: 0.0851063829787234, \u0027167377\u0027: 0.0425531914893617, \u0027167371\u0027: 0.2553191489361702, \u0027182540\u0027: 0.0851063829787234, \u0027148981\u0027: 0.2127659574468085, \u0027182541\u0027: 0.0851063829787234, \u0027189703\u0027: 0.0851063829787234, \u0027175056\u0027: 0.5106382978723404})]\n[0.1471631205673759, 0.1471631205673759, 0.14716312056737588, 0.18794326241134762, 0.17946345975948197, 0.1879432624113476, 0.14627659574468088, 0.1347517730496454, 0.1365248226950355, 0.1391843971631206]\n[(\u002712140485\u0027, False), (\u002712140486\u0027, False), (\u002712140487\u0027, False), (\u002712140488\u0027, False), (\u002712140489\u0027, False), (\u002712140490\u0027, False), (\u002712140491\u0027, False), (\u002712140492\u0027, False), (\u002712140493\u0027, False), (\u002712140494\u0027, False)]\n[(\u002712140485\u0027, False), (\u002712140486\u0027, False), (\u002712140487\u0027, False), (\u002712140488\u0027, False), (\u002712140489\u0027, False), (\u002712140490\u0027, False), (\u002712140491\u0027, False), (\u002712140492\u0027, False), (\u002712140493\u0027, False), (\u002712140494\u0027, False)]\n[(\u002712140485\u0027, 9), (\u002712140486\u0027, 9), (\u002712140487\u0027, 9), (\u002712140488\u0027, 9), (\u002712140489\u0027, 15), (\u002712140490\u0027, 9), (\u002712140491\u0027, 9), (\u002712140492\u0027, 9), (\u002712140493\u0027, 9), (\u002712140494\u0027, 9)]\n[(\u002712140485\u0027, 9), (\u002712140486\u0027, 9), (\u002712140487\u0027, 9), (\u002712140488\u0027, 9), (\u002712140489\u0027, 9), (\u002712140490\u0027, 9), (\u002712140491\u0027, 9), (\u002712140492\u0027, 9), (\u002712140493\u0027, 9), (\u002712140494\u0027, 9)]\n"
      },
      "dateCreated": "Mar 4, 2016 10:32:51 PM",
      "dateStarted": "Mar 4, 2016 11:11:24 PM",
      "dateFinished": "Mar 4, 2016 11:11:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//import org.apache.hadoop.conf.Configuration\r\n//import org.apache.hadoop.fs._\r\n\r\n//val hadoopConfig \u003d new Configuration()\r\n//hadoopConfig.addResource(new Path(\"/opt/hadoop-2.5.2/etc/hadoop/core-site.xml\"));\r\n//val hdfs \u003d FileSystem.get(new URL(\"hdfs://monarch-master:50070\"),hadoopConfig)\r\n//FileUtil.copyMerge(hdfs, new Path(\"hdfs://monarch-master/user/ubuntu/monitoring/Hazem/\"), hdfs, new Path(\"hdfs://monarch-master/user/ubuntu/monitoring/Hazem/collectedgraph.txt\"), false, hadoopConfig, null)",
      "dateUpdated": "Mar 1, 2016 1:00:47 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794035077_442110812",
      "id": "20160301-010035_894534681",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:00:35 AM",
      "dateStarted": "Mar 1, 2016 1:00:47 AM",
      "dateFinished": "Mar 1, 2016 1:00:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndf \u003d sqlc.createDataFrame(graph_number_strongly_connected_components.map(lambda x: (x[1], )),schema \u003d  [\u0027c\u0027])\n\n# Register to use in SQL\ndf.registerTempTable(\u0027graph_number_strongly_connected_components\u0027)",
      "dateUpdated": "Mar 9, 2016 5:12:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794047167_1944386701",
      "id": "20160301-010047_406727844",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:00:47 AM",
      "dateStarted": "Mar 9, 2016 5:12:38 PM",
      "dateFinished": "Mar 9, 2016 5:12:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect c, count(1) value\nfrom graph_number_strongly_connected_components\ngroup by c \norder by c",
      "dateUpdated": "Mar 9, 2016 5:12:41 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            }
          },
          "lineWithFocus": false
        },
        "enabled": true,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794055466_-1162460667",
      "id": "20160301-010055_539077724",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "c\tvalue\n9\t686\n"
      },
      "dateCreated": "Mar 1, 2016 1:00:55 AM",
      "dateStarted": "Mar 9, 2016 5:12:41 PM",
      "dateFinished": "Mar 9, 2016 5:12:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndf \u003d sqlc.createDataFrame(graph_degree_centrality_mean.map(lambda x: (x, )),schema \u003d  [\u0027c\u0027])\n\n# Register to use in SQL\ndf.registerTempTable(\u0027graph_degree_centrality_mean\u0027)",
      "dateUpdated": "Mar 9, 2016 5:12:52 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456794065716_775534867",
      "id": "20160301-010105_1137661827",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 1, 2016 1:01:05 AM",
      "dateStarted": "Mar 9, 2016 5:12:52 PM",
      "dateFinished": "Mar 9, 2016 5:12:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect c, count(1) value\nfrom graph_degree_centrality_mean\ngroup by c \norder by c",
      "dateUpdated": "Mar 9, 2016 5:12:58 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "c",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "value",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457381312547_-1247255955",
      "id": "20160307-200832_1480401272",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "c\tvalue\n0.11787439613526565\t2\n0.1198067632850241\t6\n0.11980676328502411\t7\n0.12077294685990332\t2\n0.12077294685990334\t3\n0.12173913043478254\t21\n0.12173913043478256\t8\n0.12173913043478259\t5\n0.12270531400966177\t6\n0.12270531400966178\t8\n0.12367149758454099\t37\n0.123671497584541\t42\n0.12367149758454103\t15\n0.12463768115942021\t10\n0.12463768115942023\t20\n0.12463768115942025\t8\n0.12560386473429944\t18\n0.12560386473429946\t93\n0.1256038647342995\t4\n0.12657004830917867\t28\n0.1265700483091787\t21\n0.12657004830917873\t2\n0.12753623188405788\t4\n0.1275362318840579\t105\n0.12753623188405794\t5\n0.12850241545893712\t14\n0.12850241545893715\t25\n0.12850241545893717\t1\n0.12946859903381636\t26\n0.12946859903381638\t24\n0.13043478260869557\t4\n0.1304347826086956\t7\n0.1314009661835748\t1\n0.13140096618357483\t4\n0.13236714975845404\t2\n0.13333333333333325\t2\n0.13333333333333328\t3\n0.1342995169082125\t1\n0.13526570048309172\t6\n0.13623188405797093\t1\n0.13623188405797096\t3\n0.13719806763285017\t7\n0.1371980676328502\t1\n0.1381642512077294\t1\n0.13816425120772943\t1\n0.13913043478260861\t8\n0.13913043478260864\t3\n0.13913043478260867\t1\n0.14009661835748785\t4\n0.14009661835748788\t2\n0.14106280193236706\t9\n0.1410628019323671\t4\n0.14106280193236712\t1\n0.1420289855072463\t2\n0.14299516908212553\t9\n0.14299516908212556\t1\n0.14396135265700477\t1\n0.14492753623188398\t3\n0.14685990338164243\t3\n0.14685990338164245\t2\n0.14782608695652166\t1\n0.1478260869565217\t2\n0.14879227053140087\t3\n0.1487922705314009\t1\n0.14879227053140093\t1\n0.1497584541062801\t1\n0.14975845410628014\t1\n0.15072463768115935\t2\n0.15072463768115937\t2\n0.15362318840579703\t2\n0.15652173913043474\t1\n0.15845410628019316\t1\n0.1729468599033816\t1\n"
      },
      "dateCreated": "Mar 7, 2016 8:08:32 PM",
      "dateStarted": "Mar 9, 2016 5:12:55 PM",
      "dateFinished": "Mar 9, 2016 5:12:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nschemaPeople \u003d sqlContext.createDataFrame(mixed_list_RDD)\nschemaPeople.registerTempTable(\"mixed_list_RDD\")",
      "dateUpdated": "Mar 9, 2016 5:13:14 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457381342610_-764365437",
      "id": "20160307-200902_1628616442",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 7, 2016 8:09:02 PM",
      "dateStarted": "Mar 9, 2016 5:13:14 PM",
      "dateFinished": "Mar 9, 2016 5:13:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect Size, Centrality\nfrom mixed_list_RDD\ngroup by Size ,Centrality\norder by Size",
      "dateUpdated": "Mar 9, 2016 5:13:22 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": true,
          "keys": [
            {
              "name": "Size",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "Centrality",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Size",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "Centrality",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457382219375_-213917288",
      "id": "20160307-202339_790915129",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Size\tCentrality\n2\t0.044444444444444446\n3\t0.08888888888888889\n4\t0.13333333333333333\n7\t0.26666666666666666\n11\t0.26666666666666666\n13\t0.5333333333333333\n"
      },
      "dateCreated": "Mar 7, 2016 8:23:39 PM",
      "dateStarted": "Mar 9, 2016 5:13:16 PM",
      "dateFinished": "Mar 9, 2016 5:13:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457382253385_-1040342077",
      "id": "20160307-202413_1683977322",
      "dateCreated": "Mar 7, 2016 8:24:13 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Graph Matrix",
  "id": "2BCQUWRSX",
  "angularObjects": {
    "2BCEZ2KJP": [],
    "2BD3PUZZ8": [],
    "2BBVUYEMN": [],
    "2BC6TWRV2": [],
    "2BEWMTK13": [],
    "2BEPEH11C": [],
    "2BDMSC5AD": [],
    "2BEW8QC4D": [],
    "2BF95Q92B": [],
    "2BC911G5T": [],
    "2BEU9CPXA": [],
    "2BBXKT3NQ": [],
    "2BDPHN3Z4": [],
    "2BCDQN15Y": []
  },
  "config": {},
  "info": {}
}