{
  "paragraphs": [
    {
      "text": "\r\n\r\nimport breeze.numerics.sqrt\r\nimport ca.savitestbed.monarch.storage.HbaseDriver\r\nimport com.github.nscala_time.time.Imports._\r\nimport org.apache.spark.graphx.{Graph, Edge}\r\nimport org.apache.spark.mllib.linalg.{Vectors, Vector}\r\nimport org.apache.spark.rdd.RDD\r\nimport org.apache.spark.sql.{DataFrame, SQLContext}\r\nimport org.apache.spark.{SparkContext, SparkConf}\r\nimport ca.savitestbed.monarch.fileprocessor._\r\nimport org.apache.spark.SparkContext._\r\nimport org.apache.spark.mllib.clustering._\r\n",
      "dateUpdated": "Mar 12, 2016 1:21:39 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457745579871_350633110",
      "id": "20160312-011939_1069132347",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import breeze.numerics.sqrt\nimport ca.savitestbed.monarch.storage.HbaseDriver\nimport com.github.nscala_time.time.Imports._\nimport org.apache.spark.graphx.{Graph, Edge}\nimport org.apache.spark.mllib.linalg.{Vectors, Vector}\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.{DataFrame, SQLContext}\nimport org.apache.spark.{SparkContext, SparkConf}\nimport ca.savitestbed.monarch.fileprocessor._\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.mllib.clustering._\n"
      },
      "dateCreated": "Mar 12, 2016 1:19:39 AM",
      "dateStarted": "Mar 12, 2016 1:21:39 AM",
      "dateFinished": "Mar 12, 2016 1:21:45 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def virtualGetData(sc:SparkContext, sqlContext:SQLContext, hdfsfolders:String, startTime:String, endTime:String):RDD[((String, Long), Array[Double])]\u003d{\r\nval hdfspaths \u003d hdfsfolders.split(\",\")\r\nval rid_disctime__cpuutil \u003d VmCPUUtil.calculatePeriodAvgPerRidFromFile(sqlContext, hdfspaths, startTime, endTime)\r\n      .map(s \u003d\u003e ((s._1, s._2._1), s._2._2.toDouble)).coalesce(10)\r\nval rid_disctime__diskrb \u003d VmDiskReadByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__diskwb \u003d VmDiskWriteByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__netinbyte \u003d VmNetIncomingByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\nval rid_disctime__netoutbyte \u003d VmNetOutgoingByte.calculateDerivativePerRidFromFile(sqlContext, hdfspaths, startTime, endTime).coalesce(10)\r\n// This section joins data by resource ID to create the training data set\r\n// The result dataset is organized as:\r\n// for each descrete time (resource_id, (cpu_util, disk Read, disk Write, netIn, netOut, OFInBW, OFOutBW))\r\nval rid_dt__2:RDD[((String, Long), Array[Double])] \u003d rid_disctime__cpuutil.join(rid_disctime__diskrb).filter(s \u003d\u003e s._2._1.isInstanceOf[Double] \u0026\u0026 s._2._2.isInstanceOf[Double]).map(s \u003d\u003e (s._1, Array[Double](s._2._1, s._2._2)))\r\nval rid_dt__3:RDD[((String, Long), Array[Double])] \u003d rid_dt__2.join(rid_disctime__diskwb).map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\nval rid_dt__4:RDD[((String, Long), Array[Double])] \u003d rid_dt__3.join(rid_disctime__netinbyte).map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\nval rid_dt__5:RDD[((String, Long), Array[Double])] \u003d rid_dt__4.join(rid_disctime__netoutbyte).map(s \u003d\u003e (s._1, s._2._1 :+ s._2._2))\r\nval resultData \u003d rid_dt__5\r\n//rid_dt__4.map(x \u003d\u003e (x._1,x._2.mkString(\" \")))\t\r\nresultData\r\n}\r\n",
      "dateUpdated": "Mar 12, 2016 1:20:47 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457745622851_-1737353198",
      "id": "20160312-012022_2137126249",
      "dateCreated": "Mar 12, 2016 1:20:22 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Joseph",
  "id": "2BE2CZGWS",
  "angularObjects": {
    "2BCEZ2KJP": [],
    "2BD3PUZZ8": [],
    "2BBVUYEMN": [],
    "2BC6TWRV2": [],
    "2BEWMTK13": [],
    "2BEPEH11C": [],
    "2BDMSC5AD": [],
    "2BEW8QC4D": [],
    "2BF95Q92B": [],
    "2BC911G5T": [],
    "2BEU9CPXA": [],
    "2BBXKT3NQ": [],
    "2BDPHN3Z4": [],
    "2BCDQN15Y": []
  },
  "config": {},
  "info": {}
}